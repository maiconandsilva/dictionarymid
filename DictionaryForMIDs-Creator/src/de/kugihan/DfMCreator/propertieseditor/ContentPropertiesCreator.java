/* ////////////////////////////////////////////////////////////////
*
*   In the Name of Allah
*
*   DICTIONARYFORMIDS-CREATOR
*
*   This file is part of DictionaryForMIDs-Creator
*   Copyright (C) 2012, 2013 Karim Mahamane Karimou
*   DictionaryForMIDs-Creator is a GUI wrapper around various
*   DictionaryForMIDs tools, among others we have
*   DictdToDictionaryForMIDs, DictionaryGeneration,
*   JarCreator and BitmapFontGenerator.
*
*   DictionaryForMIDs-Creator is free software;
*   you can redistribute it and/or modify it under the terms
*   of the GNU General Public License as published by the
*   Free Software Foundation; either version 2 of the License, or
*   (at your option) any later version.
*
*   DictionaryForMIDs-Creator is distributed in the hope that
*   it will be useful, but WITHOUT ANY WARRANTY; without even
*   the implied warranty of MERCHANTABILITY or
*   FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public
*   License along with DictionaryForMIDs-Creator;
*   if not, write to the Free Software Foundation, Inc.,
*   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
*
* //////////////////////////////////////////////////////////////// */


package de.kugihan.DfMCreator.propertieseditor;

import de.kugihan.DfMCreator.DfMCreatorMain;
import edu.hws.eck.mdb.I18n;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Random;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;


public class ContentPropertiesCreator extends javax.swing.JDialog implements PropertyChangeListener {

    public static ContentPropertiesCreator getContentPropsCreator(){
        return new ContentPropertiesCreator();
    }

    /**
     * Creates new form ContentPropertiesCreator
     */
    public ContentPropertiesCreator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        language2Panel1 = new javax.swing.JPanel();
        lang2Content1FontColourLabel = new javax.swing.JLabel();
        lang2Content1FontColourCB = new javax.swing.JComboBox();
        lang2Content2FontColourLabel = new javax.swing.JLabel();
        lang2Content2FontColourCB = new javax.swing.JComboBox();
        lang2Content4FontColourCB = new javax.swing.JComboBox();
        lang2Content4FontColourLabel = new javax.swing.JLabel();
        lang2Content3FontColourCB = new javax.swing.JComboBox();
        lang2Content3FontColourLabel = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lang1NumOfContentDecsCB = new javax.swing.JComboBox();
        lang2NumOfContentDecsCB = new javax.swing.JComboBox();
        lang3NumOfContentDecsCB = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        lang1Content1DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang1Content2DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang1Content4DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang1Content3DisplaySelectableCheckB = new javax.swing.JCheckBox();
        language2Panel2 = new javax.swing.JPanel();
        lang2Content1FontStyleLabel = new javax.swing.JLabel();
        lang2Content1FontStyleCB = new javax.swing.JComboBox();
        lang2Content2FontStyleLabel = new javax.swing.JLabel();
        lang2Content2FontStyleCB = new javax.swing.JComboBox();
        lang2Content4FontStyleCB = new javax.swing.JComboBox();
        lang2Content4FontStyleLabel = new javax.swing.JLabel();
        lang2Content3FontStyleCB = new javax.swing.JComboBox();
        lang2Content3FontStyleLabel = new javax.swing.JLabel();
        language3Panel3 = new javax.swing.JPanel();
        lang3Content1DisplayTextLabel = new javax.swing.JLabel();
        lang3Content2DisplayTextLabel = new javax.swing.JLabel();
        lang3Content4DisplayTextLabel = new javax.swing.JLabel();
        lang3Content3DisplayTextLabel = new javax.swing.JLabel();
        lang3Content1DisplayTextTF = new javax.swing.JTextField();
        lang3Content2DisplayTextTF = new javax.swing.JTextField();
        lang3Content3DisplayTextTF = new javax.swing.JTextField();
        lang3Content4DisplayTextTF = new javax.swing.JTextField();
        language3Panel4 = new javax.swing.JPanel();
        lang3Content1DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang3Content2DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang3Content4DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang3Content3DisplaySelectableCheckB = new javax.swing.JCheckBox();
        language3Panel1 = new javax.swing.JPanel();
        lang3Content1FontColourLabel = new javax.swing.JLabel();
        lang3Content2FontColourLabel = new javax.swing.JLabel();
        lang3Content4FontColourLabel = new javax.swing.JLabel();
        lang3Content3FontColourLabel = new javax.swing.JLabel();
        lang3Content1FontColourCB = new javax.swing.JComboBox();
        lang3Content2FontColourCB = new javax.swing.JComboBox();
        lang3Content3FontColourCB = new javax.swing.JComboBox();
        lang3Content4FontColourCB = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        setContentValsBT = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        language2Panel4 = new javax.swing.JPanel();
        lang2Content1DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang2Content2DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang2Content4DisplaySelectableCheckB = new javax.swing.JCheckBox();
        lang2Content3DisplaySelectableCheckB = new javax.swing.JCheckBox();
        jPanel26 = new javax.swing.JPanel();
        lang1Content1FontStyleLabel = new javax.swing.JLabel();
        lang1Content1FontStyleCB = new javax.swing.JComboBox();
        lang1Content2FontStyleLabel = new javax.swing.JLabel();
        lang1Content2FontStyleCB = new javax.swing.JComboBox();
        lang1Content4FontStyleLabel = new javax.swing.JLabel();
        lang1Content4FontStyleCB = new javax.swing.JComboBox();
        lang1Content3FontStyleCB = new javax.swing.JComboBox();
        lang1Content3FontStyleLabel = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        lang1Content1FontColourLabel = new javax.swing.JLabel();
        lang1Content1FontColourCB = new javax.swing.JComboBox();
        lang1Content2FontColourLabel = new javax.swing.JLabel();
        lang1Content2FontColourCB = new javax.swing.JComboBox();
        lang1Content4FontColourLabel = new javax.swing.JLabel();
        lang1Content4FontColourCB = new javax.swing.JComboBox();
        lang1Content3FontColourCB = new javax.swing.JComboBox();
        lang1Content3FontColourLabel = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        lang1Content1DisplayTextLabel = new javax.swing.JLabel();
        lang1Content2DisplayTextLabel = new javax.swing.JLabel();
        lang1Content4DisplayTextLabel = new javax.swing.JLabel();
        lang1Content3DisplayTextLabel = new javax.swing.JLabel();
        lang1Content1DisplayTextTF = new javax.swing.JTextField();
        lang1Content2DisplayTextTF = new javax.swing.JTextField();
        lang1Content3DisplayTextTF = new javax.swing.JTextField();
        lang1Content4DisplayTextTF = new javax.swing.JTextField();
        language2Panel3 = new javax.swing.JPanel();
        lang2Content1DisplayTextLabel = new javax.swing.JLabel();
        lang2Content2DisplayTextLabel = new javax.swing.JLabel();
        lang2Content4DisplayTextLabel = new javax.swing.JLabel();
        lang2Content3DisplayTextLabel = new javax.swing.JLabel();
        lang2Content3DisplayTextTF = new javax.swing.JTextField();
        lang2Content2DisplayTextTF = new javax.swing.JTextField();
        lang2Content1DisplayTextTF = new javax.swing.JTextField();
        lang2Content4DisplayTextTF = new javax.swing.JTextField();
        language3Panel2 = new javax.swing.JPanel();
        lang3Content1FontStyleLabel = new javax.swing.JLabel();
        lang3Content2FontStyleLabel = new javax.swing.JLabel();
        lang3Content4FontStyleLabel = new javax.swing.JLabel();
        lang3Content3FontStyleLabel = new javax.swing.JLabel();
        lang3Content1FontStyleCB = new javax.swing.JComboBox();
        lang3Content2FontStyleCB = new javax.swing.JComboBox();
        lang3Content3FontStyleCB = new javax.swing.JComboBox();
        lang3Content4FontStyleCB = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ContentProperties-Creator");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        language2Panel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language2Panel1.setLayout(new java.awt.GridBagLayout());

        lang2Content1FontColourLabel.setText("language2Content01FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content1FontColourLabel, gridBagConstraints);

        lang2Content1FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content1FontColourCB, gridBagConstraints);

        lang2Content2FontColourLabel.setText("language2Content02FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content2FontColourLabel, gridBagConstraints);

        lang2Content2FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content2FontColourCB, gridBagConstraints);

        lang2Content4FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content4FontColourCB, gridBagConstraints);

        lang2Content4FontColourLabel.setText("language2Content04FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content4FontColourLabel, gridBagConstraints);

        lang2Content3FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content3FontColourCB, gridBagConstraints);

        lang2Content3FontColourLabel.setText("language2Content03FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel1.add(lang2Content3FontColourLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language2Panel1, gridBagConstraints);

        jPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jLabel15.setText("<html>NumberOfContent<br>Declarations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(jLabel15, gridBagConstraints);

        lang1NumOfContentDecsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4" }));
        lang1NumOfContentDecsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lang1NumOfContentDecsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(lang1NumOfContentDecsCB, gridBagConstraints);

        lang2NumOfContentDecsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4" }));
        lang2NumOfContentDecsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lang2NumOfContentDecsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(lang2NumOfContentDecsCB, gridBagConstraints);

        lang3NumOfContentDecsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4" }));
        lang3NumOfContentDecsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lang3NumOfContentDecsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(lang3NumOfContentDecsCB, gridBagConstraints);

        jLabel17.setText(I18n.tr("language-1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(jLabel17, gridBagConstraints);

        jLabel32.setText(I18n.tr("language-2")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(jLabel32, gridBagConstraints);

        jLabel33.setText(I18n.tr("language-3")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        jPanel22.add(jLabel33, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel22, gridBagConstraints);

        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel16.setLayout(new java.awt.GridBagLayout());

        lang1Content1DisplaySelectableCheckB.setSelected(true);
        lang1Content1DisplaySelectableCheckB.setText("language1Content01DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel16.add(lang1Content1DisplaySelectableCheckB, gridBagConstraints);

        lang1Content2DisplaySelectableCheckB.setSelected(true);
        lang1Content2DisplaySelectableCheckB.setText("language1Content02DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel16.add(lang1Content2DisplaySelectableCheckB, gridBagConstraints);

        lang1Content4DisplaySelectableCheckB.setSelected(true);
        lang1Content4DisplaySelectableCheckB.setText("language1Content04DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel16.add(lang1Content4DisplaySelectableCheckB, gridBagConstraints);

        lang1Content3DisplaySelectableCheckB.setSelected(true);
        lang1Content3DisplaySelectableCheckB.setText("language1Content03DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel16.add(lang1Content3DisplaySelectableCheckB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel16, gridBagConstraints);

        language2Panel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language2Panel2.setLayout(new java.awt.GridBagLayout());

        lang2Content1FontStyleLabel.setText("language2Content01FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content1FontStyleLabel, gridBagConstraints);

        lang2Content1FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content1FontStyleCB, gridBagConstraints);

        lang2Content2FontStyleLabel.setText("language2Content02FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content2FontStyleLabel, gridBagConstraints);

        lang2Content2FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content2FontStyleCB, gridBagConstraints);

        lang2Content4FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content4FontStyleCB, gridBagConstraints);

        lang2Content4FontStyleLabel.setText("language2Content04FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content4FontStyleLabel, gridBagConstraints);

        lang2Content3FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content3FontStyleCB, gridBagConstraints);

        lang2Content3FontStyleLabel.setText("language2Content03FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel2.add(lang2Content3FontStyleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language2Panel2, gridBagConstraints);

        language3Panel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language3Panel3.setLayout(new java.awt.GridBagLayout());

        lang3Content1DisplayTextLabel.setText("language3Content01DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel3.add(lang3Content1DisplayTextLabel, gridBagConstraints);

        lang3Content2DisplayTextLabel.setText("language3Content02DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel3.add(lang3Content2DisplayTextLabel, gridBagConstraints);

        lang3Content4DisplayTextLabel.setText("language3Content04DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel3.add(lang3Content4DisplayTextLabel, gridBagConstraints);

        lang3Content3DisplayTextLabel.setText("language3Content03DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel3.add(lang3Content3DisplayTextLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language3Panel3.add(lang3Content1DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language3Panel3.add(lang3Content2DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language3Panel3.add(lang3Content3DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language3Panel3.add(lang3Content4DisplayTextTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language3Panel3, gridBagConstraints);

        language3Panel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language3Panel4.setLayout(new java.awt.GridBagLayout());

        lang3Content1DisplaySelectableCheckB.setSelected(true);
        lang3Content1DisplaySelectableCheckB.setText("language3Content01DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel4.add(lang3Content1DisplaySelectableCheckB, gridBagConstraints);

        lang3Content2DisplaySelectableCheckB.setSelected(true);
        lang3Content2DisplaySelectableCheckB.setText("language3Content02DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel4.add(lang3Content2DisplaySelectableCheckB, gridBagConstraints);

        lang3Content4DisplaySelectableCheckB.setSelected(true);
        lang3Content4DisplaySelectableCheckB.setText("language3Content04DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel4.add(lang3Content4DisplaySelectableCheckB, gridBagConstraints);

        lang3Content3DisplaySelectableCheckB.setSelected(true);
        lang3Content3DisplaySelectableCheckB.setText("language3Content03DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel4.add(lang3Content3DisplaySelectableCheckB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language3Panel4, gridBagConstraints);

        language3Panel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language3Panel1.setLayout(new java.awt.GridBagLayout());

        lang3Content1FontColourLabel.setText("language3Content01FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content1FontColourLabel, gridBagConstraints);

        lang3Content2FontColourLabel.setText("language3Content02FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content2FontColourLabel, gridBagConstraints);

        lang3Content4FontColourLabel.setText("language3Content04FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content4FontColourLabel, gridBagConstraints);

        lang3Content3FontColourLabel.setText("language3Content03FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content3FontColourLabel, gridBagConstraints);

        lang3Content1FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content1FontColourCB, gridBagConstraints);

        lang3Content2FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content2FontColourCB, gridBagConstraints);

        lang3Content3FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content3FontColourCB, gridBagConstraints);

        lang3Content4FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel1.add(lang3Content4FontColourCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language3Panel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 370;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(progressBar, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        setContentValsBT.setText(I18n.tr("save.values.contentPropsEditor")); // NOI18N
        setContentValsBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setContentValsBTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(setContentValsBT, gridBagConstraints);

        quitButton.setText(I18n.tr("QUIT.contentPropsEditor")); // NOI18N
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(quitButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel2, gridBagConstraints);

        language2Panel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language2Panel4.setLayout(new java.awt.GridBagLayout());

        lang2Content1DisplaySelectableCheckB.setSelected(true);
        lang2Content1DisplaySelectableCheckB.setText("language2Content01DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel4.add(lang2Content1DisplaySelectableCheckB, gridBagConstraints);

        lang2Content2DisplaySelectableCheckB.setSelected(true);
        lang2Content2DisplaySelectableCheckB.setText("language2Content02DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel4.add(lang2Content2DisplaySelectableCheckB, gridBagConstraints);

        lang2Content4DisplaySelectableCheckB.setSelected(true);
        lang2Content4DisplaySelectableCheckB.setText("language2Content04DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel4.add(lang2Content4DisplaySelectableCheckB, gridBagConstraints);

        lang2Content3DisplaySelectableCheckB.setSelected(true);
        lang2Content3DisplaySelectableCheckB.setText("language2Content03DisplaySelectable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel4.add(lang2Content3DisplaySelectableCheckB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language2Panel4, gridBagConstraints);

        jPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel26.setLayout(new java.awt.GridBagLayout());

        lang1Content1FontStyleLabel.setText("language1Content01FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content1FontStyleLabel, gridBagConstraints);

        lang1Content1FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content1FontStyleCB, gridBagConstraints);

        lang1Content2FontStyleLabel.setText("language1Content02FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content2FontStyleLabel, gridBagConstraints);

        lang1Content2FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content2FontStyleCB, gridBagConstraints);

        lang1Content4FontStyleLabel.setText("language1Content04FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content4FontStyleLabel, gridBagConstraints);

        lang1Content4FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content4FontStyleCB, gridBagConstraints);

        lang1Content3FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content3FontStyleCB, gridBagConstraints);

        lang1Content3FontStyleLabel.setText("language1Content03FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel26.add(lang1Content3FontStyleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel26, gridBagConstraints);

        jPanel29.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.setLayout(new java.awt.GridBagLayout());

        lang1Content1FontColourLabel.setText("language1Content01FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content1FontColourLabel, gridBagConstraints);

        lang1Content1FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content1FontColourCB, gridBagConstraints);

        lang1Content2FontColourLabel.setText("language1Content02FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content2FontColourLabel, gridBagConstraints);

        lang1Content2FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content2FontColourCB, gridBagConstraints);

        lang1Content4FontColourLabel.setText("language1Content04FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content4FontColourLabel, gridBagConstraints);

        lang1Content4FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content4FontColourCB, gridBagConstraints);

        lang1Content3FontColourCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maroon", "Red", "Yellow", "Green", "Lime", "Navy", "Blue", "Teal", "Aqua", "Purple", "Fuchsia", "Olive", "Gray", "Silver", "Black" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content3FontColourCB, gridBagConstraints);

        lang1Content3FontColourLabel.setText("language1Content03FontColour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel29.add(lang1Content3FontColourLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel29, gridBagConstraints);

        jPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel24.setLayout(new java.awt.GridBagLayout());

        lang1Content1DisplayTextLabel.setText("language1Content01DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel24.add(lang1Content1DisplayTextLabel, gridBagConstraints);

        lang1Content2DisplayTextLabel.setText("language1Content02DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel24.add(lang1Content2DisplayTextLabel, gridBagConstraints);

        lang1Content4DisplayTextLabel.setText("language1Content04DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel24.add(lang1Content4DisplayTextLabel, gridBagConstraints);

        lang1Content3DisplayTextLabel.setText("language1Content03DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel24.add(lang1Content3DisplayTextLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        jPanel24.add(lang1Content1DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        jPanel24.add(lang1Content2DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        jPanel24.add(lang1Content3DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        jPanel24.add(lang1Content4DisplayTextTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPanel24, gridBagConstraints);

        language2Panel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language2Panel3.setLayout(new java.awt.GridBagLayout());

        lang2Content1DisplayTextLabel.setText("language2Content01DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel3.add(lang2Content1DisplayTextLabel, gridBagConstraints);

        lang2Content2DisplayTextLabel.setText("language2Content02DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel3.add(lang2Content2DisplayTextLabel, gridBagConstraints);

        lang2Content4DisplayTextLabel.setText("language2Content04DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel3.add(lang2Content4DisplayTextLabel, gridBagConstraints);

        lang2Content3DisplayTextLabel.setText("language2Content03DisplayText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language2Panel3.add(lang2Content3DisplayTextLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language2Panel3.add(lang2Content3DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language2Panel3.add(lang2Content2DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language2Panel3.add(lang2Content1DisplayTextTF, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 70);
        language2Panel3.add(lang2Content4DisplayTextTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language2Panel3, gridBagConstraints);

        language3Panel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        language3Panel2.setLayout(new java.awt.GridBagLayout());

        lang3Content1FontStyleLabel.setText("language3Content01FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content1FontStyleLabel, gridBagConstraints);

        lang3Content2FontStyleLabel.setText("language3Content02FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content2FontStyleLabel, gridBagConstraints);

        lang3Content4FontStyleLabel.setText("language3Content04FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content4FontStyleLabel, gridBagConstraints);

        lang3Content3FontStyleLabel.setText("language3Content03FontStyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content3FontStyleLabel, gridBagConstraints);

        lang3Content1FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content1FontStyleCB, gridBagConstraints);

        lang3Content2FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content2FontStyleCB, gridBagConstraints);

        lang3Content3FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content3FontStyleCB, gridBagConstraints);

        lang3Content4FontStyleCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "plain", "bold", "italic", "underlined" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        language3Panel2.add(lang3Content4FontStyleCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(language3Panel2, gridBagConstraints);

        jScrollPane2.setViewportView(jPanel3);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText(I18n.tr("FILE.contentPropsEditor")); // NOI18N
        jMenu1.setToolTipText("");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(I18n.tr("save.values.contentPropsEditor")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(I18n.tr("QUIT.contentPropsEditor")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("?");

        jMenuItem3.setText(I18n.tr("about.content.properties.creator")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void lang1NumOfContentDecsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lang1NumOfContentDecsCBActionPerformed
        updateNumOfContentDec();
    }//GEN-LAST:event_lang1NumOfContentDecsCBActionPerformed

    private void lang2NumOfContentDecsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lang2NumOfContentDecsCBActionPerformed
        updateNumOfContentDec();
    }//GEN-LAST:event_lang2NumOfContentDecsCBActionPerformed

    private void lang3NumOfContentDecsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lang3NumOfContentDecsCBActionPerformed
        updateNumOfContentDec();
    }//GEN-LAST:event_lang3NumOfContentDecsCBActionPerformed

    private void setContentValsBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setContentValsBTActionPerformed
        saveTheProperties();
    }//GEN-LAST:event_setContentValsBTActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        saveTheProperties();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JOptionPane.showMessageDialog(this, I18n.tr("about.message.contentPropsEditor"),
                                            I18n.tr("title.contentPropsEditor"), JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Set the default look and feel
         */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
             javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException |
        		 IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DfMCreatorMain.class.getName()).
            log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
              //  new ContentPropertiesCreator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox lang1Content1DisplaySelectableCheckB;
    private javax.swing.JLabel lang1Content1DisplayTextLabel;
    private javax.swing.JTextField lang1Content1DisplayTextTF;
    private javax.swing.JComboBox lang1Content1FontColourCB;
    private javax.swing.JLabel lang1Content1FontColourLabel;
    private javax.swing.JComboBox lang1Content1FontStyleCB;
    private javax.swing.JLabel lang1Content1FontStyleLabel;
    private javax.swing.JCheckBox lang1Content2DisplaySelectableCheckB;
    private javax.swing.JLabel lang1Content2DisplayTextLabel;
    private javax.swing.JTextField lang1Content2DisplayTextTF;
    private javax.swing.JComboBox lang1Content2FontColourCB;
    private javax.swing.JLabel lang1Content2FontColourLabel;
    private javax.swing.JComboBox lang1Content2FontStyleCB;
    private javax.swing.JLabel lang1Content2FontStyleLabel;
    private javax.swing.JCheckBox lang1Content3DisplaySelectableCheckB;
    private javax.swing.JLabel lang1Content3DisplayTextLabel;
    private javax.swing.JTextField lang1Content3DisplayTextTF;
    private javax.swing.JComboBox lang1Content3FontColourCB;
    private javax.swing.JLabel lang1Content3FontColourLabel;
    private javax.swing.JComboBox lang1Content3FontStyleCB;
    private javax.swing.JLabel lang1Content3FontStyleLabel;
    private javax.swing.JCheckBox lang1Content4DisplaySelectableCheckB;
    private javax.swing.JLabel lang1Content4DisplayTextLabel;
    private javax.swing.JTextField lang1Content4DisplayTextTF;
    private javax.swing.JComboBox lang1Content4FontColourCB;
    private javax.swing.JLabel lang1Content4FontColourLabel;
    private javax.swing.JComboBox lang1Content4FontStyleCB;
    private javax.swing.JLabel lang1Content4FontStyleLabel;
    private javax.swing.JComboBox lang1NumOfContentDecsCB;
    private javax.swing.JCheckBox lang2Content1DisplaySelectableCheckB;
    private javax.swing.JLabel lang2Content1DisplayTextLabel;
    private javax.swing.JTextField lang2Content1DisplayTextTF;
    private javax.swing.JComboBox lang2Content1FontColourCB;
    private javax.swing.JLabel lang2Content1FontColourLabel;
    private javax.swing.JComboBox lang2Content1FontStyleCB;
    private javax.swing.JLabel lang2Content1FontStyleLabel;
    private javax.swing.JCheckBox lang2Content2DisplaySelectableCheckB;
    private javax.swing.JLabel lang2Content2DisplayTextLabel;
    private javax.swing.JTextField lang2Content2DisplayTextTF;
    private javax.swing.JComboBox lang2Content2FontColourCB;
    private javax.swing.JLabel lang2Content2FontColourLabel;
    private javax.swing.JComboBox lang2Content2FontStyleCB;
    private javax.swing.JLabel lang2Content2FontStyleLabel;
    private javax.swing.JCheckBox lang2Content3DisplaySelectableCheckB;
    private javax.swing.JLabel lang2Content3DisplayTextLabel;
    private javax.swing.JTextField lang2Content3DisplayTextTF;
    private javax.swing.JComboBox lang2Content3FontColourCB;
    private javax.swing.JLabel lang2Content3FontColourLabel;
    private javax.swing.JComboBox lang2Content3FontStyleCB;
    private javax.swing.JLabel lang2Content3FontStyleLabel;
    private javax.swing.JCheckBox lang2Content4DisplaySelectableCheckB;
    private javax.swing.JLabel lang2Content4DisplayTextLabel;
    private javax.swing.JTextField lang2Content4DisplayTextTF;
    private javax.swing.JComboBox lang2Content4FontColourCB;
    private javax.swing.JLabel lang2Content4FontColourLabel;
    private javax.swing.JComboBox lang2Content4FontStyleCB;
    private javax.swing.JLabel lang2Content4FontStyleLabel;
    private javax.swing.JComboBox lang2NumOfContentDecsCB;
    private javax.swing.JCheckBox lang3Content1DisplaySelectableCheckB;
    private javax.swing.JLabel lang3Content1DisplayTextLabel;
    private javax.swing.JTextField lang3Content1DisplayTextTF;
    private javax.swing.JComboBox lang3Content1FontColourCB;
    private javax.swing.JLabel lang3Content1FontColourLabel;
    private javax.swing.JComboBox lang3Content1FontStyleCB;
    private javax.swing.JLabel lang3Content1FontStyleLabel;
    private javax.swing.JCheckBox lang3Content2DisplaySelectableCheckB;
    private javax.swing.JLabel lang3Content2DisplayTextLabel;
    private javax.swing.JTextField lang3Content2DisplayTextTF;
    private javax.swing.JComboBox lang3Content2FontColourCB;
    private javax.swing.JLabel lang3Content2FontColourLabel;
    private javax.swing.JComboBox lang3Content2FontStyleCB;
    private javax.swing.JLabel lang3Content2FontStyleLabel;
    private javax.swing.JCheckBox lang3Content3DisplaySelectableCheckB;
    private javax.swing.JLabel lang3Content3DisplayTextLabel;
    private javax.swing.JTextField lang3Content3DisplayTextTF;
    private javax.swing.JComboBox lang3Content3FontColourCB;
    private javax.swing.JLabel lang3Content3FontColourLabel;
    private javax.swing.JComboBox lang3Content3FontStyleCB;
    private javax.swing.JLabel lang3Content3FontStyleLabel;
    private javax.swing.JCheckBox lang3Content4DisplaySelectableCheckB;
    private javax.swing.JLabel lang3Content4DisplayTextLabel;
    private javax.swing.JTextField lang3Content4DisplayTextTF;
    private javax.swing.JComboBox lang3Content4FontColourCB;
    private javax.swing.JLabel lang3Content4FontColourLabel;
    private javax.swing.JComboBox lang3Content4FontStyleCB;
    private javax.swing.JLabel lang3Content4FontStyleLabel;
    private javax.swing.JComboBox lang3NumOfContentDecsCB;
    private javax.swing.JPanel language2Panel1;
    private javax.swing.JPanel language2Panel2;
    private javax.swing.JPanel language2Panel3;
    private javax.swing.JPanel language2Panel4;
    private javax.swing.JPanel language3Panel1;
    private javax.swing.JPanel language3Panel2;
    private javax.swing.JPanel language3Panel3;
    private javax.swing.JPanel language3Panel4;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton setContentValsBT;
    // End of variables declaration//GEN-END:variables


    /**
     * updateNumOfContentDec() updates (shows or hides some components)
     * the ContentProperties-Creator's window according to the number of
     * content declaration chosen for a particular language.
     */
    public void updateNumOfContentDec(){
        switch (lang1NumOfContentDecsCB.getSelectedItem().toString()) {
            case "0":
                lang1Content1FontColourCB.setEnabled(false);
                lang1Content2FontColourCB.setEnabled(false);
                lang1Content3FontColourCB.setEnabled(false);
                lang1Content4FontColourCB.setEnabled(false);

                lang1Content1FontColourLabel.setEnabled(false);
                lang1Content2FontColourLabel.setEnabled(false);
                lang1Content3FontColourLabel.setEnabled(false);
                lang1Content4FontColourLabel.setEnabled(false);

                lang1Content1FontStyleCB.setEnabled(false);
                lang1Content2FontStyleCB.setEnabled(false);
                lang1Content3FontStyleCB.setEnabled(false);
                lang1Content4FontStyleCB.setEnabled(false);

                lang1Content1FontStyleLabel.setEnabled(false);
                lang1Content2FontStyleLabel.setEnabled(false);
                lang1Content3FontStyleLabel.setEnabled(false);
                lang1Content4FontStyleLabel.setEnabled(false);

                lang1Content1DisplayTextTF.setEnabled(false);
                lang1Content2DisplayTextTF.setEnabled(false);
                lang1Content3DisplayTextTF.setEnabled(false);
                lang1Content4DisplayTextTF.setEnabled(false);

                lang1Content1DisplayTextLabel.setEnabled(false);
                lang1Content2DisplayTextLabel.setEnabled(false);
                lang1Content3DisplayTextLabel.setEnabled(false);
                lang1Content4DisplayTextLabel.setEnabled(false);

                lang1Content1DisplaySelectableCheckB.setEnabled(false);
                lang1Content2DisplaySelectableCheckB.setEnabled(false);
                lang1Content3DisplaySelectableCheckB.setEnabled(false);
                lang1Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "1":
                lang1Content1FontColourCB.setEnabled(true);
                lang1Content2FontColourCB.setEnabled(false);
                lang1Content3FontColourCB.setEnabled(false);
                lang1Content4FontColourCB.setEnabled(false);

                lang1Content1FontColourLabel.setEnabled(true);
                lang1Content2FontColourLabel.setEnabled(false);
                lang1Content3FontColourLabel.setEnabled(false);
                lang1Content4FontColourLabel.setEnabled(false);

                lang1Content1FontStyleCB.setEnabled(true);
                lang1Content2FontStyleCB.setEnabled(false);
                lang1Content3FontStyleCB.setEnabled(false);
                lang1Content4FontStyleCB.setEnabled(false);

                lang1Content1FontStyleLabel.setEnabled(true);
                lang1Content2FontStyleLabel.setEnabled(false);
                lang1Content3FontStyleLabel.setEnabled(false);
                lang1Content4FontStyleLabel.setEnabled(false);

                lang1Content1DisplayTextTF.setEnabled(true);
                lang1Content2DisplayTextTF.setEnabled(false);
                lang1Content3DisplayTextTF.setEnabled(false);
                lang1Content4DisplayTextTF.setEnabled(false);

                lang1Content1DisplayTextLabel.setEnabled(true);
                lang1Content2DisplayTextLabel.setEnabled(false);
                lang1Content3DisplayTextLabel.setEnabled(false);
                lang1Content4DisplayTextLabel.setEnabled(false);

                lang1Content1DisplaySelectableCheckB.setEnabled(true);
                lang1Content2DisplaySelectableCheckB.setEnabled(false);
                lang1Content3DisplaySelectableCheckB.setEnabled(false);
                lang1Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "2":
                lang1Content1FontColourCB.setEnabled(true);
                lang1Content2FontColourCB.setEnabled(true);
                lang1Content3FontColourCB.setEnabled(false);
                lang1Content4FontColourCB.setEnabled(false);

                lang1Content1FontColourLabel.setEnabled(true);
                lang1Content2FontColourLabel.setEnabled(true);
                lang1Content3FontColourLabel.setEnabled(false);
                lang1Content4FontColourLabel.setEnabled(false);

                lang1Content1FontStyleCB.setEnabled(true);
                lang1Content2FontStyleCB.setEnabled(true);
                lang1Content3FontStyleCB.setEnabled(false);
                lang1Content4FontStyleCB.setEnabled(false);

                lang1Content1FontStyleLabel.setEnabled(true);
                lang1Content2FontStyleLabel.setEnabled(true);
                lang1Content3FontStyleLabel.setEnabled(false);
                lang1Content4FontStyleLabel.setEnabled(false);

                lang1Content1DisplayTextTF.setEnabled(true);
                lang1Content2DisplayTextTF.setEnabled(true);
                lang1Content3DisplayTextTF.setEnabled(false);
                lang1Content4DisplayTextTF.setEnabled(false);

                lang1Content1DisplayTextLabel.setEnabled(true);
                lang1Content2DisplayTextLabel.setEnabled(true);
                lang1Content3DisplayTextLabel.setEnabled(false);
                lang1Content4DisplayTextLabel.setEnabled(false);

                lang1Content1DisplaySelectableCheckB.setEnabled(true);
                lang1Content2DisplaySelectableCheckB.setEnabled(true);
                lang1Content3DisplaySelectableCheckB.setEnabled(false);
                lang1Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "3":
                lang1Content1FontColourCB.setEnabled(true);
                lang1Content2FontColourCB.setEnabled(true);
                lang1Content3FontColourCB.setEnabled(true);
                lang1Content4FontColourCB.setEnabled(false);

                lang1Content1FontColourLabel.setEnabled(true);
                lang1Content2FontColourLabel.setEnabled(true);
                lang1Content3FontColourLabel.setEnabled(true);
                lang1Content4FontColourLabel.setEnabled(false);

                lang1Content1FontStyleCB.setEnabled(true);
                lang1Content2FontStyleCB.setEnabled(true);
                lang1Content3FontStyleCB.setEnabled(true);
                lang1Content4FontStyleCB.setEnabled(false);

                lang1Content1FontStyleLabel.setEnabled(true);
                lang1Content2FontStyleLabel.setEnabled(true);
                lang1Content3FontStyleLabel.setEnabled(true);
                lang1Content4FontStyleLabel.setEnabled(false);

                lang1Content1DisplayTextTF.setEnabled(true);
                lang1Content2DisplayTextTF.setEnabled(true);
                lang1Content3DisplayTextTF.setEnabled(true);
                lang1Content4DisplayTextTF.setEnabled(false);

                lang1Content1DisplayTextLabel.setEnabled(true);
                lang1Content2DisplayTextLabel.setEnabled(true);
                lang1Content3DisplayTextLabel.setEnabled(true);
                lang1Content4DisplayTextLabel.setEnabled(false);

                lang1Content1DisplaySelectableCheckB.setEnabled(true);
                lang1Content2DisplaySelectableCheckB.setEnabled(true);
                lang1Content3DisplaySelectableCheckB.setEnabled(true);
                lang1Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "4":
                lang1Content1FontColourCB.setEnabled(true);
                lang1Content2FontColourCB.setEnabled(true);
                lang1Content3FontColourCB.setEnabled(true);
                lang1Content4FontColourCB.setEnabled(true);

                lang1Content1FontColourLabel.setEnabled(true);
                lang1Content2FontColourLabel.setEnabled(true);
                lang1Content3FontColourLabel.setEnabled(true);
                lang1Content4FontColourLabel.setEnabled(true);

                lang1Content1FontStyleCB.setEnabled(true);
                lang1Content2FontStyleCB.setEnabled(true);
                lang1Content3FontStyleCB.setEnabled(true);
                lang1Content4FontStyleCB.setEnabled(true);

                lang1Content1FontStyleLabel.setEnabled(true);
                lang1Content2FontStyleLabel.setEnabled(true);
                lang1Content3FontStyleLabel.setEnabled(true);
                lang1Content4FontStyleLabel.setEnabled(true);

                lang1Content1DisplayTextTF.setEnabled(true);
                lang1Content2DisplayTextTF.setEnabled(true);
                lang1Content3DisplayTextTF.setEnabled(true);
                lang1Content4DisplayTextTF.setEnabled(true);

                lang1Content1DisplayTextLabel.setEnabled(true);
                lang1Content2DisplayTextLabel.setEnabled(true);
                lang1Content3DisplayTextLabel.setEnabled(true);
                lang1Content4DisplayTextLabel.setEnabled(true);

                lang1Content1DisplaySelectableCheckB.setEnabled(true);
                lang1Content2DisplaySelectableCheckB.setEnabled(true);
                lang1Content3DisplaySelectableCheckB.setEnabled(true);
                lang1Content4DisplaySelectableCheckB.setEnabled(true);
        }

        switch (lang2NumOfContentDecsCB.getSelectedItem().toString()) {
            case "0":
                lang2Content1FontColourCB.setEnabled(false);
                lang2Content2FontColourCB.setEnabled(false);
                lang2Content3FontColourCB.setEnabled(false);
                lang2Content4FontColourCB.setEnabled(false);

                lang1Content2FontColourLabel.setEnabled(false);
                lang2Content2FontColourLabel.setEnabled(false);
                lang2Content3FontColourLabel.setEnabled(false);
                lang2Content4FontColourLabel.setEnabled(false);

                lang2Content1FontStyleCB.setEnabled(false);
                lang2Content2FontStyleCB.setEnabled(false);
                lang2Content3FontStyleCB.setEnabled(false);
                lang2Content4FontStyleCB.setEnabled(false);

                lang2Content1FontStyleLabel.setEnabled(false);
                lang2Content2FontStyleLabel.setEnabled(false);
                lang2Content3FontStyleLabel.setEnabled(false);
                lang2Content4FontStyleLabel.setEnabled(false);

                lang2Content1DisplayTextTF.setEnabled(false);
                lang2Content2DisplayTextTF.setEnabled(false);
                lang2Content3DisplayTextTF.setEnabled(false);
                lang2Content4DisplayTextTF.setEnabled(false);

                lang2Content1DisplayTextLabel.setEnabled(false);
                lang2Content2DisplayTextLabel.setEnabled(false);
                lang2Content3DisplayTextLabel.setEnabled(false);
                lang2Content4DisplayTextLabel.setEnabled(false);

                lang2Content1DisplaySelectableCheckB.setEnabled(false);
                lang2Content2DisplaySelectableCheckB.setEnabled(false);
                lang2Content3DisplaySelectableCheckB.setEnabled(false);
                lang2Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "1":
                lang2Content1FontColourCB.setEnabled(true);
                lang2Content2FontColourCB.setEnabled(false);
                lang2Content3FontColourCB.setEnabled(false);
                lang2Content4FontColourCB.setEnabled(false);

                lang2Content1FontColourLabel.setEnabled(true);
                lang2Content2FontColourLabel.setEnabled(false);
                lang2Content3FontColourLabel.setEnabled(false);
                lang2Content4FontColourLabel.setEnabled(false);

                lang2Content1FontStyleCB.setEnabled(true);
                lang2Content2FontStyleCB.setEnabled(false);
                lang2Content3FontStyleCB.setEnabled(false);
                lang2Content4FontStyleCB.setEnabled(false);

                lang2Content1FontStyleLabel.setEnabled(true);
                lang2Content2FontStyleLabel.setEnabled(false);
                lang2Content3FontStyleLabel.setEnabled(false);
                lang2Content4FontStyleLabel.setEnabled(false);

                lang2Content1DisplayTextTF.setEnabled(true);
                lang2Content2DisplayTextTF.setEnabled(false);
                lang2Content3DisplayTextTF.setEnabled(false);
                lang2Content4DisplayTextTF.setEnabled(false);

                lang2Content1DisplayTextLabel.setEnabled(true);
                lang2Content2DisplayTextLabel.setEnabled(false);
                lang2Content3DisplayTextLabel.setEnabled(false);
                lang2Content4DisplayTextLabel.setEnabled(false);

                lang2Content1DisplaySelectableCheckB.setEnabled(true);
                lang2Content2DisplaySelectableCheckB.setEnabled(false);
                lang2Content3DisplaySelectableCheckB.setEnabled(false);
                lang2Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "2":
                lang2Content1FontColourCB.setEnabled(true);
                lang2Content2FontColourCB.setEnabled(true);
                lang2Content3FontColourCB.setEnabled(false);
                lang2Content4FontColourCB.setEnabled(false);

                lang1Content2FontColourLabel.setEnabled(true);
                lang2Content2FontColourLabel.setEnabled(true);
                lang2Content3FontColourLabel.setEnabled(false);
                lang2Content4FontColourLabel.setEnabled(false);

                lang2Content1FontStyleCB.setEnabled(true);
                lang2Content2FontStyleCB.setEnabled(true);
                lang2Content3FontStyleCB.setEnabled(false);
                lang2Content4FontStyleCB.setEnabled(false);

                lang2Content1FontStyleLabel.setEnabled(true);
                lang2Content2FontStyleLabel.setEnabled(true);
                lang2Content3FontStyleLabel.setEnabled(false);
                lang2Content4FontStyleLabel.setEnabled(false);

                lang2Content1DisplayTextTF.setEnabled(true);
                lang2Content2DisplayTextTF.setEnabled(true);
                lang2Content3DisplayTextTF.setEnabled(false);
                lang2Content4DisplayTextTF.setEnabled(false);

                lang2Content1DisplayTextLabel.setEnabled(true);
                lang2Content2DisplayTextLabel.setEnabled(true);
                lang2Content3DisplayTextLabel.setEnabled(false);
                lang2Content4DisplayTextLabel.setEnabled(false);

                lang2Content1DisplaySelectableCheckB.setEnabled(true);
                lang2Content2DisplaySelectableCheckB.setEnabled(true);
                lang2Content3DisplaySelectableCheckB.setEnabled(false);
                lang2Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "3":
                lang2Content1FontColourCB.setEnabled(true);
                lang2Content2FontColourCB.setEnabled(true);
                lang2Content3FontColourCB.setEnabled(true);
                lang2Content4FontColourCB.setEnabled(false);

                lang2Content1FontColourLabel.setEnabled(true);
                lang2Content2FontColourLabel.setEnabled(true);
                lang2Content3FontColourLabel.setEnabled(true);
                lang2Content4FontColourLabel.setEnabled(false);

                lang2Content1FontStyleCB.setEnabled(true);
                lang2Content2FontStyleCB.setEnabled(true);
                lang2Content3FontStyleCB.setEnabled(true);
                lang2Content4FontStyleCB.setEnabled(false);

                lang2Content1FontStyleLabel.setEnabled(true);
                lang2Content2FontStyleLabel.setEnabled(true);
                lang2Content3FontStyleLabel.setEnabled(true);
                lang2Content4FontStyleLabel.setEnabled(false);

                lang2Content1DisplayTextTF.setEnabled(true);
                lang2Content2DisplayTextTF.setEnabled(true);
                lang2Content3DisplayTextTF.setEnabled(true);
                lang2Content4DisplayTextTF.setEnabled(false);

                lang2Content1DisplayTextLabel.setEnabled(true);
                lang2Content2DisplayTextLabel.setEnabled(true);
                lang2Content3DisplayTextLabel.setEnabled(true);
                lang2Content4DisplayTextLabel.setEnabled(false);

                lang2Content1DisplaySelectableCheckB.setEnabled(true);
                lang2Content2DisplaySelectableCheckB.setEnabled(true);
                lang2Content3DisplaySelectableCheckB.setEnabled(true);
                lang2Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "4":
                lang2Content1FontColourCB.setEnabled(true);
                lang2Content2FontColourCB.setEnabled(true);
                lang2Content3FontColourCB.setEnabled(true);
                lang2Content4FontColourCB.setEnabled(true);

                lang1Content2FontColourLabel.setEnabled(true);
                lang2Content2FontColourLabel.setEnabled(true);
                lang2Content3FontColourLabel.setEnabled(true);
                lang2Content4FontColourLabel.setEnabled(true);

                lang2Content1FontStyleCB.setEnabled(true);
                lang2Content2FontStyleCB.setEnabled(true);
                lang2Content3FontStyleCB.setEnabled(true);
                lang2Content4FontStyleCB.setEnabled(true);

                lang2Content1FontStyleLabel.setEnabled(true);
                lang2Content2FontStyleLabel.setEnabled(true);
                lang2Content3FontStyleLabel.setEnabled(true);
                lang2Content4FontStyleLabel.setEnabled(true);

                lang2Content1DisplayTextTF.setEnabled(true);
                lang2Content2DisplayTextTF.setEnabled(true);
                lang2Content3DisplayTextTF.setEnabled(true);
                lang2Content4DisplayTextTF.setEnabled(true);

                lang2Content1DisplayTextLabel.setEnabled(true);
                lang2Content2DisplayTextLabel.setEnabled(true);
                lang2Content3DisplayTextLabel.setEnabled(true);
                lang2Content4DisplayTextLabel.setEnabled(true);

                lang2Content1DisplaySelectableCheckB.setEnabled(true);
                lang2Content2DisplaySelectableCheckB.setEnabled(true);
                lang2Content3DisplaySelectableCheckB.setEnabled(true);
                lang2Content4DisplaySelectableCheckB.setEnabled(true);
                break;
        }
        
        switch (lang3NumOfContentDecsCB.getSelectedItem().toString()) {
            case "0":
                lang3Content1FontColourCB.setEnabled(false);
                lang3Content2FontColourCB.setEnabled(false);
                lang3Content3FontColourCB.setEnabled(false);
                lang3Content4FontColourCB.setEnabled(false);

                lang3Content1FontColourLabel.setEnabled(false);
                lang3Content2FontColourLabel.setEnabled(false);
                lang3Content3FontColourLabel.setEnabled(false);
                lang3Content4FontColourLabel.setEnabled(false);

                lang3Content1FontStyleCB.setEnabled(false);
                lang3Content2FontStyleCB.setEnabled(false);
                lang3Content3FontStyleCB.setEnabled(false);
                lang3Content4FontStyleCB.setEnabled(false);

                lang3Content1FontStyleLabel.setEnabled(false);
                lang3Content2FontStyleLabel.setEnabled(false);
                lang3Content3FontStyleLabel.setEnabled(false);
                lang3Content4FontStyleLabel.setEnabled(false);

                lang3Content1DisplayTextTF.setEnabled(false);
                lang3Content2DisplayTextTF.setEnabled(false);
                lang3Content3DisplayTextTF.setEnabled(false);
                lang3Content4DisplayTextTF.setEnabled(false);

                lang3Content1DisplayTextLabel.setEnabled(false);
                lang3Content2DisplayTextLabel.setEnabled(false);
                lang3Content3DisplayTextLabel.setEnabled(false);
                lang3Content4DisplayTextLabel.setEnabled(false);

                lang3Content1DisplaySelectableCheckB.setEnabled(false);
                lang3Content2DisplaySelectableCheckB.setEnabled(false);
                lang3Content3DisplaySelectableCheckB.setEnabled(false);
                lang3Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "1":
                lang3Content1FontColourCB.setEnabled(true);
                lang3Content2FontColourCB.setEnabled(false);
                lang3Content3FontColourCB.setEnabled(false);
                lang3Content4FontColourCB.setEnabled(false);

                lang3Content1FontColourLabel.setEnabled(true);
                lang3Content2FontColourLabel.setEnabled(false);
                lang3Content3FontColourLabel.setEnabled(false);
                lang3Content4FontColourLabel.setEnabled(false);

                lang3Content1FontStyleCB.setEnabled(true);
                lang3Content2FontStyleCB.setEnabled(false);
                lang3Content3FontStyleCB.setEnabled(false);
                lang3Content4FontStyleCB.setEnabled(false);

                lang3Content1FontStyleLabel.setEnabled(true);
                lang3Content2FontStyleLabel.setEnabled(false);
                lang3Content3FontStyleLabel.setEnabled(false);
                lang3Content4FontStyleLabel.setEnabled(false);

                lang3Content1DisplayTextTF.setEnabled(true);
                lang3Content2DisplayTextTF.setEnabled(false);
                lang3Content3DisplayTextTF.setEnabled(false);
                lang3Content4DisplayTextTF.setEnabled(false);

                lang3Content1DisplayTextLabel.setEnabled(true);
                lang3Content2DisplayTextLabel.setEnabled(false);
                lang3Content3DisplayTextLabel.setEnabled(false);
                lang3Content4DisplayTextLabel.setEnabled(false);

                lang3Content1DisplaySelectableCheckB.setEnabled(true);
                lang3Content2DisplaySelectableCheckB.setEnabled(false);
                lang3Content3DisplaySelectableCheckB.setEnabled(false);
                lang3Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "2":
                lang3Content1FontColourCB.setEnabled(true);
                lang3Content2FontColourCB.setEnabled(true);
                lang3Content3FontColourCB.setEnabled(false);
                lang3Content4FontColourCB.setEnabled(false);

                lang3Content1FontColourLabel.setEnabled(true);
                lang3Content2FontColourLabel.setEnabled(true);
                lang3Content3FontColourLabel.setEnabled(false);
                lang3Content4FontColourLabel.setEnabled(false);

                lang3Content1FontStyleCB.setEnabled(true);
                lang3Content2FontStyleCB.setEnabled(true);
                lang3Content3FontStyleCB.setEnabled(false);
                lang3Content4FontStyleCB.setEnabled(false);

                lang3Content1FontStyleLabel.setEnabled(true);
                lang3Content2FontStyleLabel.setEnabled(true);
                lang3Content3FontStyleLabel.setEnabled(false);
                lang3Content4FontStyleLabel.setEnabled(false);

                lang3Content1DisplayTextTF.setEnabled(true);
                lang3Content2DisplayTextTF.setEnabled(true);
                lang3Content3DisplayTextTF.setEnabled(false);
                lang3Content4DisplayTextTF.setEnabled(false);

                lang3Content1DisplayTextLabel.setEnabled(true);
                lang3Content2DisplayTextLabel.setEnabled(true);
                lang3Content3DisplayTextLabel.setEnabled(false);
                lang3Content4DisplayTextLabel.setEnabled(false);

                lang3Content1DisplaySelectableCheckB.setEnabled(true);
                lang3Content2DisplaySelectableCheckB.setEnabled(true);
                lang3Content3DisplaySelectableCheckB.setEnabled(false);
                lang3Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "3":
                lang3Content1FontColourCB.setEnabled(true);
                lang3Content2FontColourCB.setEnabled(true);
                lang3Content3FontColourCB.setEnabled(true);
                lang3Content4FontColourCB.setEnabled(false);

                lang3Content1FontColourLabel.setEnabled(true);
                lang3Content2FontColourLabel.setEnabled(true);
                lang3Content3FontColourLabel.setEnabled(true);
                lang3Content4FontColourLabel.setEnabled(false);

                lang3Content1FontStyleCB.setEnabled(true);
                lang3Content2FontStyleCB.setEnabled(true);
                lang3Content3FontStyleCB.setEnabled(true);
                lang3Content4FontStyleCB.setEnabled(false);

                lang3Content1FontStyleLabel.setEnabled(true);
                lang3Content2FontStyleLabel.setEnabled(true);
                lang3Content3FontStyleLabel.setEnabled(true);
                lang3Content4FontStyleLabel.setEnabled(false);

                lang3Content1DisplayTextTF.setEnabled(true);
                lang3Content2DisplayTextTF.setEnabled(true);
                lang3Content3DisplayTextTF.setEnabled(true);
                lang3Content4DisplayTextTF.setEnabled(false);

                lang3Content1DisplayTextLabel.setEnabled(true);
                lang3Content2DisplayTextLabel.setEnabled(true);
                lang3Content3DisplayTextLabel.setEnabled(true);
                lang3Content4DisplayTextLabel.setEnabled(false);

                lang3Content1DisplaySelectableCheckB.setEnabled(true);
                lang3Content2DisplaySelectableCheckB.setEnabled(true);
                lang3Content3DisplaySelectableCheckB.setEnabled(true);
                lang3Content4DisplaySelectableCheckB.setEnabled(false);
                break;
            case "4":
                lang3Content1FontColourCB.setEnabled(true);
                lang3Content2FontColourCB.setEnabled(true);
                lang3Content3FontColourCB.setEnabled(true);
                lang3Content4FontColourCB.setEnabled(true);

                lang3Content1FontColourLabel.setEnabled(true);
                lang3Content2FontColourLabel.setEnabled(true);
                lang3Content3FontColourLabel.setEnabled(true);
                lang3Content4FontColourLabel.setEnabled(true);

                lang3Content1FontStyleCB.setEnabled(true);
                lang3Content2FontStyleCB.setEnabled(true);
                lang3Content3FontStyleCB.setEnabled(true);
                lang3Content4FontStyleCB.setEnabled(true);

                lang3Content1FontStyleLabel.setEnabled(true);
                lang3Content2FontStyleLabel.setEnabled(true);
                lang3Content3FontStyleLabel.setEnabled(true);
                lang3Content4FontStyleLabel.setEnabled(true);

                lang3Content1DisplayTextTF.setEnabled(true);
                lang3Content2DisplayTextTF.setEnabled(true);
                lang3Content3DisplayTextTF.setEnabled(true);
                lang3Content4DisplayTextTF.setEnabled(true);

                lang3Content1DisplayTextLabel.setEnabled(true);
                lang3Content2DisplayTextLabel.setEnabled(true);
                lang3Content3DisplayTextLabel.setEnabled(true);
                lang3Content4DisplayTextLabel.setEnabled(true);

                lang3Content1DisplaySelectableCheckB.setEnabled(true);
                lang3Content2DisplaySelectableCheckB.setEnabled(true);
                lang3Content3DisplaySelectableCheckB.setEnabled(true);
                lang3Content4DisplaySelectableCheckB.setEnabled(true);
                break;
        }
    }

    /**
     * getRGBCodes() converts the selected item's
     * name into a RGB color and returns it.
     * @param comboBox
     * @returns String colorCode
     */
    public static String getRGBCodes(JComboBox comboBox){
        int i = comboBox.getSelectedIndex();
        String colorCode;
        switch (i){
            case 0:
            colorCode = "128,0,0";
            break;

            case 1:
            colorCode = "255,0,0";
            break;

            case 2:
            colorCode = "255,255,0";
            break;

            case 3:
            colorCode = "0,128,0";
            break;

            case 4:
            colorCode = "0,255,0";
            break;

            case 5:
            colorCode = "0,0,128";
            break;

            case 6:
            colorCode = "0,0,255";
            break;

            case 7:
            colorCode = "0,128,128";
            break;

            case 8:
            colorCode = "0,255,255";
            break;

            case 9:
            colorCode = "128,0,128";
            break;

            case 10:
            colorCode = "255,0,255";
            break;

            case 11:
            colorCode = "128,128,0";
            break;

            case 12:
            colorCode = "128,128,128";
            break;

            case 13:
            colorCode = "192,192,192";
            break;

            default:
            colorCode = "0,0,0";
        }
        return colorCode;
    }


    /**
     * getRGBCodes() converts the selected item's
     * name into a RGB color and returns it.
     * @param comboBox
     * @returns String colorCode
     */
    public static int getColorNamesFromRGBCodes(String colorCode){
        int idx;
        switch (colorCode){
            case "128,0,0":
            idx = 0;
            break;

            case "255,0,0":
            idx = 1;
            break;

            case "255,255,0":
            idx = 2;
            break;

            case "0,128,0":
            idx = 3;
            break;

            case "0,255,0":
            idx = 4;
            break;

            case "0,0,128":
            idx = 5;
            break;

            case "0,0,255":
            idx = 6;
            break;

            case "0,128,128":
            idx = 7;
            break;

            case "0,255,255":
            idx = 8;
            break;

            case "128,0,128":
            idx = 9;
            break;

            case "255,0,255":
            idx = 10;
            break;

            case "128,128,0":
            idx = 11;
            break;

            case "128,128,128":
            idx = 12;
            break;

            case "192,192,192":
            idx = 13;
            break;

            default:
            idx = 1000;
        }
        return idx;
    }


    /**
     * setTheContentNNProperties() saves the content
     * settings into the content variables located as
     * public static variables in the PropertiesEditor Class.
     */
    private void setTheContentNNProperties() {

        if ("0".equals(lang1NumOfContentDecsCB.getSelectedItem().toString()) &&
            "0".equals(lang2NumOfContentDecsCB.getSelectedItem().toString()) &&
            "0".equals(lang3NumOfContentDecsCB.getSelectedItem().toString())){
            throw new IllegalArgumentException(I18n.tr("no.content.prop.dec"));
        }


        PropertiesEditor.language1NumberOfContentDeclarations = lang1NumOfContentDecsCB.getSelectedItem().toString();
        PropertiesEditor.language2NumberOfContentDeclarations = lang2NumOfContentDecsCB.getSelectedItem().toString();
        PropertiesEditor.language3NumberOfContentDeclarations = lang3NumOfContentDecsCB.getSelectedItem().toString();

        //////////////// LANGUAGE-1 ///////////////
        switch (lang1NumOfContentDecsCB.getSelectedItem().toString()) {
            case "1": // language1Content01 - Only ONE content properties
                if (!"".equals(lang1Content1DisplayTextTF.getText())){
                    PropertiesEditor.language1Content01DisplayText = lang1Content1DisplayTextTF.getText();
                }
                PropertiesEditor.language1Content01FontColour = getRGBCodes(lang1Content1FontColourCB);
                PropertiesEditor.language1Content01FontStyle = lang1Content1FontStyleCB.getSelectedItem().toString();

                if (lang1Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content01DisplaySelectable = "false";
                }
            
            case "2": // language1Content02 - TWO content properties
                if (!"".equals(lang1Content1DisplayTextTF.getText())){
                    PropertiesEditor.language1Content01DisplayText = lang1Content1DisplayTextTF.getText();
                }
                
                PropertiesEditor.language1Content01FontColour = getRGBCodes(lang1Content1FontColourCB);
                PropertiesEditor.language1Content01FontStyle = lang1Content1FontStyleCB.getSelectedItem().toString();

                if (lang1Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content2DisplayTextTF.getText())){
                    PropertiesEditor.language1Content02DisplayText = lang1Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content02FontColour = getRGBCodes(lang1Content2FontColourCB);
                PropertiesEditor.language1Content02FontStyle = lang1Content2FontStyleCB.getSelectedItem().toString();

                if (lang1Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content02DisplaySelectable = "false";
                }
                break;
            
            case "3": // language1Content03 - THREE content properties
                if (!"".equals(lang1Content1DisplayTextTF.getText())){
                    PropertiesEditor.language1Content01DisplayText = lang1Content1DisplayTextTF.getText();
                }
                
                PropertiesEditor.language1Content01FontColour = getRGBCodes(lang1Content1FontColourCB);
                PropertiesEditor.language1Content01FontStyle = lang1Content1FontStyleCB.getSelectedItem().toString();

                if (lang1Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content2DisplayTextTF.getText())){
                    PropertiesEditor.language1Content02DisplayText = lang1Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content02FontColour = getRGBCodes(lang1Content2FontColourCB);
                PropertiesEditor.language1Content02FontStyle = lang1Content2FontStyleCB.getSelectedItem().toString();

                if (lang1Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content3DisplayTextTF.getText())){
                    PropertiesEditor.language1Content03DisplayText = lang1Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content03FontColour = getRGBCodes(lang1Content3FontColourCB);
                PropertiesEditor.language1Content03FontStyle = lang1Content3FontStyleCB.getSelectedItem().toString();

                if (lang1Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content03DisplaySelectable = "false";
                }
                break;
            
            case "4": // language1Content04 - FOUR content properties
                if (!"".equals(lang1Content1DisplayTextTF.getText())){
                    PropertiesEditor.language1Content01DisplayText = lang1Content1DisplayTextTF.getText();
                }
                
                PropertiesEditor.language1Content01FontColour = getRGBCodes(lang1Content1FontColourCB);
                PropertiesEditor.language1Content01FontStyle = lang1Content1FontStyleCB.getSelectedItem().toString();

                if (lang1Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content2DisplayTextTF.getText())){
                    PropertiesEditor.language1Content02DisplayText = lang1Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content02FontColour = getRGBCodes(lang1Content2FontColourCB);
                PropertiesEditor.language1Content02FontStyle = lang1Content2FontStyleCB.getSelectedItem().toString();

                if (lang1Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content3DisplayTextTF.getText())){
                    PropertiesEditor.language1Content03DisplayText = lang1Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content03FontColour = getRGBCodes(lang1Content3FontColourCB);
                PropertiesEditor.language1Content03FontStyle = lang1Content3FontStyleCB.getSelectedItem().toString();

                if (lang1Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content03DisplaySelectable = "false";
                }
                
                if (!"".equals(lang1Content4DisplayTextTF.getText())){
                    PropertiesEditor.language1Content04DisplayText = lang1Content4DisplayTextTF.getText();
                }

                PropertiesEditor.language1Content04FontColour = getRGBCodes(lang1Content4FontColourCB);
                PropertiesEditor.language1Content04FontStyle = lang1Content4FontStyleCB.getSelectedItem().toString();

                if (lang1Content4DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language1Content04DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language1Content04DisplaySelectable = "false";
                }
                break;
        }

        //////////////// LANGUAGE-2 ///////////////        
        switch (lang2NumOfContentDecsCB.getSelectedItem().toString()) {            
            case "1": // language2Content01 - ONE content properties
                if (!"".equals(lang2Content1DisplayTextTF.getText())){
                    PropertiesEditor.language2Content01DisplayText = lang2Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content01FontColour = getRGBCodes(lang2Content1FontColourCB);
                PropertiesEditor.language2Content01FontStyle = lang2Content1FontStyleCB.getSelectedItem().toString();

                if (lang2Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content01DisplaySelectable = "false";
                }
            
            case "2": // language2Content02 - TWO content properties                
                if (!"".equals(lang2Content1DisplayTextTF.getText())){
                    PropertiesEditor.language2Content01DisplayText = lang2Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content01FontColour = getRGBCodes(lang2Content1FontColourCB);
                PropertiesEditor.language2Content01FontStyle = lang2Content1FontStyleCB.getSelectedItem().toString();

                if (lang2Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content2DisplayTextTF.getText())){
                    PropertiesEditor.language2Content02DisplayText = lang2Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content02FontColour = getRGBCodes(lang2Content2FontColourCB);
                PropertiesEditor.language2Content02FontStyle = lang2Content2FontStyleCB.getSelectedItem().toString();

                if (lang2Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content02DisplaySelectable = "false";
                }
                break;
            
            case "3": // language2Content03 - THREE content properties
                if (!"".equals(lang2Content1DisplayTextTF.getText())){
                    PropertiesEditor.language2Content01DisplayText = lang2Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content01FontColour = getRGBCodes(lang2Content1FontColourCB);
                PropertiesEditor.language2Content01FontStyle = lang2Content1FontStyleCB.getSelectedItem().toString();

                if (lang2Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content2DisplayTextTF.getText())){
                    PropertiesEditor.language2Content02DisplayText = lang2Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content02FontColour = getRGBCodes(lang2Content2FontColourCB);
                PropertiesEditor.language2Content02FontStyle = lang2Content2FontStyleCB.getSelectedItem().toString();

                if (lang2Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content3DisplayTextTF.getText())){
                    PropertiesEditor.language2Content03DisplayText = lang2Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content03FontColour = getRGBCodes(lang2Content3FontColourCB);
                PropertiesEditor.language2Content03FontStyle = lang2Content3FontStyleCB.getSelectedItem().toString();

                if (lang2Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content03DisplaySelectable = "false";
                }
                break;
            
            case "4": // language2Content04 - FOUR content properties
                if (!"".equals(lang2Content1DisplayTextTF.getText())){
                    PropertiesEditor.language2Content01DisplayText = lang2Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content01FontColour = getRGBCodes(lang2Content1FontColourCB);
                PropertiesEditor.language2Content01FontStyle = lang2Content1FontStyleCB.getSelectedItem().toString();

                if (lang2Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content2DisplayTextTF.getText())){
                    PropertiesEditor.language2Content02DisplayText = lang2Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content02FontColour = getRGBCodes(lang2Content2FontColourCB);
                PropertiesEditor.language2Content02FontStyle = lang2Content2FontStyleCB.getSelectedItem().toString();

                if (lang2Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content3DisplayTextTF.getText())){
                    PropertiesEditor.language2Content03DisplayText = lang2Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content03FontColour = getRGBCodes(lang2Content3FontColourCB);
                PropertiesEditor.language2Content03FontStyle = lang2Content3FontStyleCB.getSelectedItem().toString();

                if (lang2Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content03DisplaySelectable = "false";
                }
                
                if (!"".equals(lang2Content4DisplayTextTF.getText())){
                    PropertiesEditor.language2Content04DisplayText = lang2Content4DisplayTextTF.getText();
                }

                PropertiesEditor.language2Content04FontColour = getRGBCodes(lang2Content4FontColourCB);
                PropertiesEditor.language2Content04FontStyle = lang2Content4FontStyleCB.getSelectedItem().toString();

                if (lang2Content4DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language2Content04DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language2Content04DisplaySelectable = "false";
                }
                break;
        }

        //////////////// LANGUAGE-3 ///////////////        
        switch (lang3NumOfContentDecsCB.getSelectedItem().toString()) {
            case "1": // language3Content01 - ONE content properties
                if (!"".equals(lang3Content1DisplayTextTF.getText())){
                    PropertiesEditor.language3Content01DisplayText = lang3Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content01FontColour = getRGBCodes(lang3Content1FontColourCB);
                PropertiesEditor.language3Content01FontStyle = lang3Content1FontStyleCB.getSelectedItem().toString();

                if (lang3Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content01DisplaySelectable = "false";
                }
            
            case "2": // language3Content02 - TWO content properties
                if (!"".equals(lang3Content1DisplayTextTF.getText())){
                    PropertiesEditor.language3Content01DisplayText = lang3Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content01FontColour = getRGBCodes(lang3Content1FontColourCB);
                PropertiesEditor.language3Content01FontStyle = lang3Content1FontStyleCB.getSelectedItem().toString();

                if (lang3Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content2DisplayTextTF.getText())){
                    PropertiesEditor.language3Content02DisplayText = lang3Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content02FontColour = getRGBCodes(lang3Content2FontColourCB);
                PropertiesEditor.language3Content02FontStyle = lang3Content2FontStyleCB.getSelectedItem().toString();

                if (lang3Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content02DisplaySelectable = "false";
                }
                break;
            
            case "3": // language3Content03 - THREE content properties
                if (!"".equals(lang3Content1DisplayTextTF.getText())){
                    PropertiesEditor.language3Content01DisplayText = lang3Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content01FontColour = getRGBCodes(lang3Content1FontColourCB);
                PropertiesEditor.language3Content01FontStyle = lang3Content1FontStyleCB.getSelectedItem().toString();

                if (lang3Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content2DisplayTextTF.getText())){
                    PropertiesEditor.language3Content02DisplayText = lang3Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content02FontColour = getRGBCodes(lang3Content2FontColourCB);
                PropertiesEditor.language3Content02FontStyle = lang3Content2FontStyleCB.getSelectedItem().toString();

                if (lang3Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content3DisplayTextTF.getText())){
                    PropertiesEditor.language3Content03DisplayText = lang3Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content03FontColour = getRGBCodes(lang3Content3FontColourCB);
                PropertiesEditor.language3Content03FontStyle = lang3Content3FontStyleCB.getSelectedItem().toString();

                if (lang3Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content03DisplaySelectable = "false";
                }
                break;
            
            case "4": // language3Content04 - FOUR content properties
                if (!"".equals(lang3Content1DisplayTextTF.getText())){
                    PropertiesEditor.language3Content01DisplayText = lang3Content1DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content01FontColour = getRGBCodes(lang3Content1FontColourCB);
                PropertiesEditor.language3Content01FontStyle = lang3Content1FontStyleCB.getSelectedItem().toString();

                if (lang3Content1DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content01DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content01DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content2DisplayTextTF.getText())){
                    PropertiesEditor.language3Content02DisplayText = lang3Content2DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content02FontColour = getRGBCodes(lang3Content2FontColourCB);
                PropertiesEditor.language3Content02FontStyle = lang3Content2FontStyleCB.getSelectedItem().toString();

                if (lang3Content2DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content02DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content02DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content3DisplayTextTF.getText())){
                    PropertiesEditor.language3Content03DisplayText = lang3Content3DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content03FontColour = getRGBCodes(lang3Content3FontColourCB);
                PropertiesEditor.language3Content03FontStyle = lang3Content3FontStyleCB.getSelectedItem().toString();

                if (lang3Content3DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content03DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content03DisplaySelectable = "false";
                }
                
                if (!"".equals(lang3Content4DisplayTextTF.getText())){
                    PropertiesEditor.language3Content04DisplayText = lang3Content4DisplayTextTF.getText();
                }

                PropertiesEditor.language3Content04FontColour = getRGBCodes(lang3Content4FontColourCB);
                PropertiesEditor.language3Content04FontStyle = lang3Content4FontStyleCB.getSelectedItem().toString();

                if (lang3Content4DisplaySelectableCheckB.isSelected()){
                    PropertiesEditor.language3Content04DisplaySelectable = "true";
                } else {
                    PropertiesEditor.language3Content04DisplaySelectable = "false";
                }
                break;
        }
    }

    /**
     * loadAndEditExistingContentNNProperties() loads content-NN
     * properties from a DictionaryForMIDs.properties file that
     * is loaded in the PropertiesEditor so as to be edited.
     */
    public void loadAndEditExistingContentNNProperties() {   
        try {
            String lang1NumOfContentDec = PropertiesEditor.dfMProps.getProperty("language1NumberOfContentDeclarations");
            if (lang1NumOfContentDec != null && !"".equals(lang1NumOfContentDec)){
                if (Integer.parseInt(lang1NumOfContentDec) == 1 || Integer.parseInt(lang1NumOfContentDec) == 2
                        || Integer.parseInt(lang1NumOfContentDec) == 3 || Integer.parseInt(lang1NumOfContentDec) == 4){
                        lang1NumOfContentDecsCB.setSelectedItem(lang1NumOfContentDec);
                } else {
                    // If no content declaration is available, choose 1 by default
                    lang1NumOfContentDecsCB.setSelectedIndex(1);
                }
            }

            String lang2NumOfContentDec = PropertiesEditor.dfMProps.getProperty("language2NumberOfContentDeclarations");
            if (lang2NumOfContentDec != null && !"".equals(lang2NumOfContentDec)){
                if (Integer.parseInt(lang2NumOfContentDec) == 1 || Integer.parseInt(lang2NumOfContentDec) == 2
                        || Integer.parseInt(lang2NumOfContentDec) == 3 || Integer.parseInt(lang2NumOfContentDec) == 4){
                        lang2NumOfContentDecsCB.setSelectedItem(lang2NumOfContentDec);
                } else {
                    // TODO
                }
            }

            String lang3NumOfContentDec = PropertiesEditor.dfMProps.getProperty("language3NumberOfContentDeclarations");
            if (lang3NumOfContentDec != null && !"".equals(lang3NumOfContentDec)){
                if (Integer.parseInt(lang3NumOfContentDec) == 1 || Integer.parseInt(lang3NumOfContentDec) == 2
                        || Integer.parseInt(lang3NumOfContentDec) == 3 || Integer.parseInt(lang3NumOfContentDec) == 4){
                        lang3NumOfContentDecsCB.setSelectedItem(lang3NumOfContentDec);
                } else {
                    // TODO
                }
            }

            //////////////// LANGUAGE-1 ///////////////
            // Local variables declaration
            String l1C1DT;
            String l1C1FC;
            String l1C1FS;
            String l1C1DS;
            String l1C2DT;
            String l1C2FC;
            String l1C2FS;
            String l1C2DS;
            String l1C3DT;
            String l1C3FC;
            String l1C3FS;
            String l1C3DS;
            String l1C4DT;
            String l1C4FC;
            String l1C4FS;
            String l1C4DS;
            // language1Content01
            switch (lang1NumOfContentDecsCB.getSelectedItem().toString()) {
                case "1":
                    l1C1DT = PropertiesEditor.dfMProps.getProperty("language1Content01DisplayText");
                    if (l1C1DT != null && !"".equals(l1C1DT)){
                        lang1Content1DisplayTextTF.setText(l1C1DT);
                    }

                    l1C1FC = PropertiesEditor.dfMProps.getProperty("language1Content01FontColour");
                    if (l1C1FC != null && !"".equals(l1C1FC)){
                        int i = getColorNamesFromRGBCodes(l1C1FC);
                        if (1 <= 13){
                            lang1Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C1FCObj = PropertiesEditor.makeObj(l1C1FC);
                            lang1Content1FontColourCB.addItem(l1C1FCObj);
                            lang1Content1FontColourCB.setSelectedItem(l1C1FCObj);
                        }
                    }

                    l1C1FS = PropertiesEditor.dfMProps.getProperty("language1Content01FontStyle");
                    if (l1C1FS != null && !"".equals(l1C1FS)){
                        lang1Content1FontStyleCB.setSelectedItem(l1C1FS);
                    }

                    l1C1DS = PropertiesEditor.dfMProps.getProperty("language1Content01DisplaySelectable");
                    if (l1C1DS != null && !"".equals(l1C1DS)){
                        switch (l1C1DS) {
                            case "true":
                                lang1Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }

                // language1Content02
                case "2":
                    l1C1DT = PropertiesEditor.dfMProps.getProperty("language1Content01DisplayText");
                    if (l1C1DT != null && !"".equals(l1C1DT)){
                        lang1Content1DisplayTextTF.setText(l1C1DT);
                    }
                    l1C1FC = PropertiesEditor.dfMProps.getProperty("language1Content01FontColour");
                    if (l1C1FC != null && !"".equals(l1C1FC)){
                        int i = getColorNamesFromRGBCodes(l1C1FC);
                        if (1 <= 13){
                            lang1Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C1FCObj = PropertiesEditor.makeObj(l1C1FC);
                            lang1Content1FontColourCB.addItem(l1C1FCObj);
                            lang1Content1FontColourCB.setSelectedItem(l1C1FCObj);
                        }
                    }
                    l1C1FS = PropertiesEditor.dfMProps.getProperty("language1Content01FontStyle");
                    if (l1C1FS != null && !"".equals(l1C1FS)){
                        lang1Content1FontStyleCB.setSelectedItem(l1C1FS);
                    }
                    l1C1DS = PropertiesEditor.dfMProps.getProperty("language1Content01DisplaySelectable");
                    if (l1C1DS != null && !"".equals(l1C1DS)){
                        switch (l1C1DS) {
                            case "true":
                                lang1Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C2DT = PropertiesEditor.dfMProps.getProperty("language1Content02DisplayText");
                    if (l1C2DT != null && !"".equals(l1C2DT)){
                        lang1Content2DisplayTextTF.setText(l1C2DT);
                    }
                    l1C2FC = PropertiesEditor.dfMProps.getProperty("language1Content02FontColour");
                    if (l1C2FC != null && !"".equals(l1C2FC)){
                        int i = getColorNamesFromRGBCodes(l1C2FC);
                        if (1 <= 13){
                            lang1Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C2FCObj = PropertiesEditor.makeObj(l1C2FC);
                            lang1Content2FontColourCB.addItem(l1C2FCObj);
                            lang1Content2FontColourCB.setSelectedItem(l1C2FCObj);
                        }
                    }
                    l1C2FS = PropertiesEditor.dfMProps.getProperty("language1Content02FontStyle");
                    if (l1C2FS != null && !"".equals(l1C2FS)){
                        lang1Content2FontStyleCB.setSelectedItem(l1C2FS);
                    }
                    l1C2DS = PropertiesEditor.dfMProps.getProperty("language1Content02DisplaySelectable");
                    if (l1C2DS != null && !"".equals(l1C2DS)){
                        switch (l1C2DS) {
                            case "true":
                                lang1Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language1Content03
                case "3":
                    l1C1DT = PropertiesEditor.dfMProps.getProperty("language1Content01DisplayText");
                    if (l1C1DT != null && !"".equals(l1C1DT)){
                        lang1Content1DisplayTextTF.setText(l1C1DT);
                    }
                    l1C1FC = PropertiesEditor.dfMProps.getProperty("language1Content01FontColour");
                    if (l1C1FC != null && !"".equals(l1C1FC)){
                        int i = getColorNamesFromRGBCodes(l1C1FC);
                        if (1 <= 13){
                            lang1Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C1FCObj = PropertiesEditor.makeObj(l1C1FC);
                            lang1Content1FontColourCB.addItem(l1C1FCObj);
                            lang1Content1FontColourCB.setSelectedItem(l1C1FCObj);
                        }
                    }
                    l1C1FS = PropertiesEditor.dfMProps.getProperty("language1Content01FontStyle");
                    if (l1C1FS != null && !"".equals(l1C1FS)){
                        lang1Content1FontStyleCB.setSelectedItem(l1C1FS);
                    }
                    l1C1DS = PropertiesEditor.dfMProps.getProperty("language1Content01DisplaySelectable");
                    if (l1C1DS != null && !"".equals(l1C1DS)){
                        switch (l1C1DS) {
                            case "true":
                                lang1Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C2DT = PropertiesEditor.dfMProps.getProperty("language1Content02DisplayText");
                    if (l1C2DT != null && !"".equals(l1C2DT)){
                        lang1Content2DisplayTextTF.setText(l1C2DT);
                    }
                    l1C2FC = PropertiesEditor.dfMProps.getProperty("language1Content02FontColour");
                    if (l1C2FC != null && !"".equals(l1C2FC)){
                        int i = getColorNamesFromRGBCodes(l1C2FC);
                        if (1 <= 13){
                            lang1Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C2FCObj = PropertiesEditor.makeObj(l1C2FC);
                            lang1Content2FontColourCB.addItem(l1C2FCObj);
                            lang1Content2FontColourCB.setSelectedItem(l1C2FCObj);
                        }
                    }
                    l1C2FS = PropertiesEditor.dfMProps.getProperty("language1Content02FontStyle");
                    if (l1C2FS != null && !"".equals(l1C2FS)){
                        lang1Content2FontStyleCB.setSelectedItem(l1C2FS);
                    }
                    l1C2DS = PropertiesEditor.dfMProps.getProperty("language1Content02DisplaySelectable");
                    if (l1C2DS != null && !"".equals(l1C2DS)){
                        switch (l1C2DS) {
                            case "true":
                                lang1Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C3DT = PropertiesEditor.dfMProps.getProperty("language1Content03DisplayText");
                    if (l1C3DT != null && !"".equals(l1C3DT)){
                        lang1Content3DisplayTextTF.setText(l1C3DT);
                    }                    
                    l1C3FC = PropertiesEditor.dfMProps.getProperty("language1Content03FontColour");
                    if (l1C3FC != null && !"".equals(l1C3FC)){
                        int i = getColorNamesFromRGBCodes(l1C3FC);
                        if (i <= 13){
                            lang1Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l1C3FCObj = PropertiesEditor.makeObj(l1C3FC);
                        lang1Content3FontColourCB.addItem(l1C3FCObj);
                        lang1Content3FontColourCB.setSelectedItem(l1C3FCObj);
                        }
                    }
                    l1C3FS = PropertiesEditor.dfMProps.getProperty("language1Content03FontStyle");
                    if (l1C3FS != null && !"".equals(l1C3FS)){
                        lang1Content3FontStyleCB.setSelectedItem(l1C3FS);
                    }
                    l1C3DS = PropertiesEditor.dfMProps.getProperty("language1Content03DisplaySelectable");
                    if (l1C3DS != null && !"".equals(l1C3DS)){
                        switch (l1C3DS) {
                            case "true":
                                lang1Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language1Content04
                case "4":
                    l1C1DT = PropertiesEditor.dfMProps.getProperty("language1Content01DisplayText");
                    if (l1C1DT != null && !"".equals(l1C1DT)){
                        lang1Content1DisplayTextTF.setText(l1C1DT);
                    }
                    l1C1FC = PropertiesEditor.dfMProps.getProperty("language1Content01FontColour");
                    if (l1C1FC != null && !"".equals(l1C1FC)){
                        int i = getColorNamesFromRGBCodes(l1C1FC);
                        if (1 <= 13){
                            lang1Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C1FCObj = PropertiesEditor.makeObj(l1C1FC);
                            lang1Content1FontColourCB.addItem(l1C1FCObj);
                            lang1Content1FontColourCB.setSelectedItem(l1C1FCObj);
                        }
                    }
                    l1C1FS = PropertiesEditor.dfMProps.getProperty("language1Content01FontStyle");
                    if (l1C1FS != null && !"".equals(l1C1FS)){
                        lang1Content1FontStyleCB.setSelectedItem(l1C1FS);
                    }
                    l1C1DS = PropertiesEditor.dfMProps.getProperty("language1Content01DisplaySelectable");
                    if (l1C1DS != null && !"".equals(l1C1DS)){
                        switch (l1C1DS) {
                            case "true":
                                lang1Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C2DT = PropertiesEditor.dfMProps.getProperty("language1Content02DisplayText");
                    if (l1C2DT != null && !"".equals(l1C2DT)){
                        lang1Content2DisplayTextTF.setText(l1C2DT);
                    }
                    l1C2FC = PropertiesEditor.dfMProps.getProperty("language1Content02FontColour");
                    if (l1C2FC != null && !"".equals(l1C2FC)){
                        int i = getColorNamesFromRGBCodes(l1C2FC);
                        if (1 <= 13){
                            lang1Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l1C2FCObj = PropertiesEditor.makeObj(l1C2FC);
                            lang1Content2FontColourCB.addItem(l1C2FCObj);
                            lang1Content2FontColourCB.setSelectedItem(l1C2FCObj);
                        }
                    }
                    l1C2FS = PropertiesEditor.dfMProps.getProperty("language1Content02FontStyle");
                    if (l1C2FS != null && !"".equals(l1C2FS)){
                        lang1Content2FontStyleCB.setSelectedItem(l1C2FS);
                    }
                    l1C2DS = PropertiesEditor.dfMProps.getProperty("language1Content02DisplaySelectable");
                    if (l1C2DS != null && !"".equals(l1C2DS)){
                        switch (l1C2DS) {
                            case "true":
                                lang1Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C3DT = PropertiesEditor.dfMProps.getProperty("language1Content03DisplayText");
                    if (l1C3DT != null && !"".equals(l1C3DT)){
                        lang1Content3DisplayTextTF.setText(l1C3DT);
                    }                    
                    l1C3FC = PropertiesEditor.dfMProps.getProperty("language1Content03FontColour");
                    if (l1C3FC != null && !"".equals(l1C3FC)){
                        int i = getColorNamesFromRGBCodes(l1C3FC);
                        if (i <= 13){
                            lang1Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l1C3FCObj = PropertiesEditor.makeObj(l1C3FC);
                        lang1Content3FontColourCB.addItem(l1C3FCObj);
                        lang1Content3FontColourCB.setSelectedItem(l1C3FCObj);
                        }
                    }
                    l1C3FS = PropertiesEditor.dfMProps.getProperty("language1Content03FontStyle");
                    if (l1C3FS != null && !"".equals(l1C3FS)){
                        lang1Content3FontStyleCB.setSelectedItem(l1C3FS);
                    }
                    l1C3DS = PropertiesEditor.dfMProps.getProperty("language1Content03DisplaySelectable");
                    if (l1C3DS != null && !"".equals(l1C3DS)){
                        switch (l1C3DS) {
                            case "true":
                                lang1Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang1Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l1C4DT = PropertiesEditor.dfMProps.getProperty("language1Content04DisplayText");
                    if (l1C4DT != null && !"".equals(l1C4DT)){
                        lang1Content4DisplayTextTF.setText(l1C4DT);
                    }
                    l1C4FC = PropertiesEditor.dfMProps.getProperty("language1Content04FontColour");
                    if (l1C4FC != null && !"".equals(l1C4FC)){
                        int i = getColorNamesFromRGBCodes(l1C4FC);
                        if (i <= 13){
                            lang1Content4FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                            Object l1C4FCObj = PropertiesEditor.makeObj(l1C4FC);
                            lang1Content4FontColourCB.addItem(l1C4FCObj);
                            lang1Content4FontColourCB.setSelectedItem(l1C4FCObj);
                        }
                    }
                    l1C4FS = PropertiesEditor.dfMProps.getProperty("language1Content04FontStyle");
                    if (l1C4FS != null && !"".equals(l1C4FS)){
                        lang1Content4FontStyleCB.setSelectedItem(l1C4FS);
                    }
                    l1C4DS = PropertiesEditor.dfMProps.getProperty("language1Content04DisplaySelectable");
                    switch (l1C4DS) {
                        case "true":
                            lang1Content4DisplaySelectableCheckB.setSelected(true);
                            break;
                        case "false":
                            lang1Content4DisplaySelectableCheckB.setSelected(false);
                            break;
                    }
            }

            //////////////// LANGUAGE-2 ///////////////
            // Local variables declaration
            String l2C1DT;
            String l2C1FC;
            String l2C1FS;
            String l2C1DS;
            String l2C2DT;
            String l2C2FC;
            String l2C2FS;
            String l2C2DS;
            String l2C3DT;
            String l2C3FC;
            String l2C3FS;
            String l2C3DS;
            String l2C4DT;
            String l2C4FC;
            String l2C4FS;
            String l2C4DS;            
            // language2Content01
            switch (lang2NumOfContentDecsCB.getSelectedItem().toString()) {
                case "1":
                    l2C1DT = PropertiesEditor.dfMProps.getProperty("language2Content01DisplayText");
                    if (l2C1DT != null && !"".equals(l2C1DT)){
                        lang2Content1DisplayTextTF.setText(l2C1DT);
                    }
                    l2C1FC = PropertiesEditor.dfMProps.getProperty("language2Content01FontColour");
                    if (l2C1FC != null && !"".equals(l2C1FC)){
                        int i = getColorNamesFromRGBCodes(l2C1FC);
                        if (1 <= 13){
                            lang2Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C1FCObj = PropertiesEditor.makeObj(l2C1FC);
                            lang2Content1FontColourCB.addItem(l2C1FCObj);
                            lang2Content1FontColourCB.setSelectedItem(l2C1FCObj);
                        }
                    }
                    l2C1FS = PropertiesEditor.dfMProps.getProperty("language2Content01FontStyle");
                    if (l2C1FS != null && !"".equals(l2C1FS)){
                        lang2Content1FontStyleCB.setSelectedItem(l2C1FS);
                    }
                    l2C1DS = PropertiesEditor.dfMProps.getProperty("language2Content01DisplaySelectable");
                    if (l2C1DS != null && !"".equals(l2C1DS)){
                        switch (l2C1DS) {
                            case "true":
                                lang2Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }

                // language2Content02
                case "2":
                    l2C1DT = PropertiesEditor.dfMProps.getProperty("language2Content01DisplayText");
                    if (l2C1DT != null && !"".equals(l2C1DT)){
                        lang2Content1DisplayTextTF.setText(l2C1DT);
                    }
                    l2C1FC = PropertiesEditor.dfMProps.getProperty("language2Content01FontColour");
                    if (l2C1FC != null && !"".equals(l2C1FC)){
                        int i = getColorNamesFromRGBCodes(l2C1FC);
                        if (1 <= 13){
                            lang2Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C1FCObj = PropertiesEditor.makeObj(l2C1FC);
                            lang2Content1FontColourCB.addItem(l2C1FCObj);
                            lang2Content1FontColourCB.setSelectedItem(l2C1FCObj);
                        }
                    }
                    l2C1FS = PropertiesEditor.dfMProps.getProperty("language2Content01FontStyle");
                    if (l2C1FS != null && !"".equals(l2C1FS)){
                        lang2Content1FontStyleCB.setSelectedItem(l2C1FS);
                    }
                    l2C1DS = PropertiesEditor.dfMProps.getProperty("language2Content01DisplaySelectable");
                    if (l2C1DS != null && !"".equals(l2C1DS)){
                        switch (l2C1DS) {
                            case "true":
                                lang2Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l2C2DT = PropertiesEditor.dfMProps.getProperty("language2Content02DisplayText");
                    if (l2C2DT != null && !"".equals(l2C2DT)){
                        lang2Content2DisplayTextTF.setText(l2C2DT);
                    }
                    l2C2FC = PropertiesEditor.dfMProps.getProperty("language2Content02FontColour");
                    if (l2C2FC != null && !"".equals(l2C2FC)){
                        int i = getColorNamesFromRGBCodes(l2C2FC);
                        if (1 <= 13){
                            lang2Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C2FCObj = PropertiesEditor.makeObj(l2C2FC);
                            lang2Content2FontColourCB.addItem(l2C2FCObj);
                            lang2Content2FontColourCB.setSelectedItem(l2C2FCObj);
                        }
                    }
                    l2C2FS = PropertiesEditor.dfMProps.getProperty("language2Content02FontStyle");
                    if (l2C2FS != null && !"".equals(l2C2FS)){
                        lang2Content2FontStyleCB.setSelectedItem(l2C2FS);
                    }
                    l2C2DS = PropertiesEditor.dfMProps.getProperty("language2Content02DisplaySelectable");
                    if (l2C2DS != null && !"".equals(l2C2DS)){
                        switch (l2C2DS) {
                            case "true":
                                lang2Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language2Content03
                case "3":
                    l2C1DT = PropertiesEditor.dfMProps.getProperty("language2Content01DisplayText");
                    if (l2C1DT != null && !"".equals(l2C1DT)){
                        lang2Content1DisplayTextTF.setText(l2C1DT);
                    }
                    l2C1FC = PropertiesEditor.dfMProps.getProperty("language2Content01FontColour");
                    if (l2C1FC != null && !"".equals(l2C1FC)){
                        int i = getColorNamesFromRGBCodes(l2C1FC);
                        if (1 <= 13){
                            lang2Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C1FCObj = PropertiesEditor.makeObj(l2C1FC);
                            lang2Content1FontColourCB.addItem(l2C1FCObj);
                            lang2Content1FontColourCB.setSelectedItem(l2C1FCObj);
                        }
                    }
                    l2C1FS = PropertiesEditor.dfMProps.getProperty("language2Content01FontStyle");
                    if (l2C1FS != null && !"".equals(l2C1FS)){
                        lang2Content1FontStyleCB.setSelectedItem(l2C1FS);
                    }
                    l2C1DS = PropertiesEditor.dfMProps.getProperty("language2Content01DisplaySelectable");
                    if (l2C1DS != null && !"".equals(l2C1DS)){
                        switch (l2C1DS) {
                            case "true":
                                lang2Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l2C2DT = PropertiesEditor.dfMProps.getProperty("language2Content02DisplayText");
                    if (l2C2DT != null && !"".equals(l2C2DT)){
                        lang2Content2DisplayTextTF.setText(l2C2DT);
                    }
                    l2C2FC = PropertiesEditor.dfMProps.getProperty("language2Content02FontColour");
                    if (l2C2FC != null && !"".equals(l2C2FC)){
                        int i = getColorNamesFromRGBCodes(l2C2FC);
                        if (1 <= 13){
                            lang2Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C2FCObj = PropertiesEditor.makeObj(l2C2FC);
                            lang2Content2FontColourCB.addItem(l2C2FCObj);
                            lang2Content2FontColourCB.setSelectedItem(l2C2FCObj);
                        }
                    }
                    l2C2FS = PropertiesEditor.dfMProps.getProperty("language2Content02FontStyle");
                    if (l2C2FS != null && !"".equals(l2C2FS)){
                        lang2Content2FontStyleCB.setSelectedItem(l2C2FS);
                    }
                    l2C2DS = PropertiesEditor.dfMProps.getProperty("language2Content02DisplaySelectable");
                    if (l2C2DS != null && !"".equals(l2C2DS)){
                        switch (l2C2DS) {
                            case "true":
                                lang2Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l2C3DT = PropertiesEditor.dfMProps.getProperty("language2Content03DisplayText");
                    if (l2C3DT != null && !"".equals(l2C3DT)){
                        lang2Content3DisplayTextTF.setText(l2C3DT);
                    }
                    l2C3FC = PropertiesEditor.dfMProps.getProperty("language2Content03FontColour");
                    if (l2C3FC != null && !"".equals(l2C3FC)){
                        int i = getColorNamesFromRGBCodes(l2C3FC);
                        if (i <= 13){
                            lang2Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l2C3FCObj = PropertiesEditor.makeObj(l2C3FC);
                        lang2Content3FontColourCB.addItem(l2C3FCObj);
                        lang2Content3FontColourCB.setSelectedItem(l2C3FCObj);
                        }
                    }
                    l2C3FS = PropertiesEditor.dfMProps.getProperty("language2Content03FontStyle");
                    if (l2C3FS != null && !"".equals(l2C3FS)){
                        lang2Content3FontStyleCB.setSelectedItem(l2C3FS);
                    }
                    l2C3DS = PropertiesEditor.dfMProps.getProperty("language2Content03DisplaySelectable");
                    if (l2C3DS != null && !"".equals(l2C3DS)){
                        switch (l2C3DS) {
                            case "true":
                                lang2Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language2Content04
                case "4":
                    l2C1DT = PropertiesEditor.dfMProps.getProperty("language2Content01DisplayText");
                    if (l2C1DT != null && !"".equals(l2C1DT)){
                        lang2Content1DisplayTextTF.setText(l2C1DT);
                    }
                    l2C1FC = PropertiesEditor.dfMProps.getProperty("language2Content01FontColour");
                    if (l2C1FC != null && !"".equals(l2C1FC)){
                        int i = getColorNamesFromRGBCodes(l2C1FC);
                        if (1 <= 13){
                            lang2Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C1FCObj = PropertiesEditor.makeObj(l2C1FC);
                            lang2Content1FontColourCB.addItem(l2C1FCObj);
                            lang2Content1FontColourCB.setSelectedItem(l2C1FCObj);
                        }
                    }
                    l2C1FS = PropertiesEditor.dfMProps.getProperty("language2Content01FontStyle");
                    if (l2C1FS != null && !"".equals(l2C1FS)){
                        lang2Content1FontStyleCB.setSelectedItem(l2C1FS);
                    }
                    l2C1DS = PropertiesEditor.dfMProps.getProperty("language2Content01DisplaySelectable");
                    if (l2C1DS != null && !"".equals(l2C1DS)){
                        switch (l2C1DS) {
                            case "true":
                                lang2Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }                    
                    l2C2DT = PropertiesEditor.dfMProps.getProperty("language2Content02DisplayText");
                    if (l2C2DT != null && !"".equals(l2C2DT)){
                        lang2Content2DisplayTextTF.setText(l2C2DT);
                    }
                    l2C2FC = PropertiesEditor.dfMProps.getProperty("language2Content02FontColour");
                    if (l2C2FC != null && !"".equals(l2C2FC)){
                        int i = getColorNamesFromRGBCodes(l2C2FC);
                        if (1 <= 13){
                            lang2Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l2C2FCObj = PropertiesEditor.makeObj(l2C2FC);
                            lang2Content2FontColourCB.addItem(l2C2FCObj);
                            lang2Content2FontColourCB.setSelectedItem(l2C2FCObj);
                        }
                    }
                    l2C2FS = PropertiesEditor.dfMProps.getProperty("language2Content02FontStyle");
                    if (l2C2FS != null && !"".equals(l2C2FS)){
                        lang2Content2FontStyleCB.setSelectedItem(l2C2FS);
                    }
                    l2C2DS = PropertiesEditor.dfMProps.getProperty("language2Content02DisplaySelectable");
                    if (l2C2DS != null && !"".equals(l2C2DS)){
                        switch (l2C2DS) {
                            case "true":
                                lang2Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l2C3DT = PropertiesEditor.dfMProps.getProperty("language2Content03DisplayText");
                    if (l2C3DT != null && !"".equals(l2C3DT)){
                        lang2Content3DisplayTextTF.setText(l2C3DT);
                    }
                    l2C3FC = PropertiesEditor.dfMProps.getProperty("language2Content03FontColour");
                    if (l2C3FC != null && !"".equals(l2C3FC)){
                        int i = getColorNamesFromRGBCodes(l2C3FC);
                        if (i <= 13){
                            lang2Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l2C3FCObj = PropertiesEditor.makeObj(l2C3FC);
                        lang2Content3FontColourCB.addItem(l2C3FCObj);
                        lang2Content3FontColourCB.setSelectedItem(l2C3FCObj);
                        }
                    }
                    l2C3FS = PropertiesEditor.dfMProps.getProperty("language2Content03FontStyle");
                    if (l2C3FS != null && !"".equals(l2C3FS)){
                        lang2Content3FontStyleCB.setSelectedItem(l2C3FS);
                    }
                    l2C3DS = PropertiesEditor.dfMProps.getProperty("language2Content03DisplaySelectable");
                    if (l2C3DS != null && !"".equals(l2C3DS)){
                        switch (l2C3DS) {
                            case "true":
                                lang2Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang2Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l2C4DT = PropertiesEditor.dfMProps.getProperty("language2Content04DisplayText");
                    if (l2C4DT != null && !"".equals(l2C4DT)){
                        lang2Content4DisplayTextTF.setText(l2C4DT);
                    }

                    l2C4FC = PropertiesEditor.dfMProps.getProperty("language2Content04FontColour");
                    if (l2C4FC != null && !"".equals(l2C4FC)){
                        int i = getColorNamesFromRGBCodes(l2C4FC);
                        if (i <= 13){
                            lang2Content4FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                            Object l2C4FCObj = PropertiesEditor.makeObj(l2C4FC);
                            lang2Content4FontColourCB.addItem(l2C4FCObj);
                            lang2Content4FontColourCB.setSelectedItem(l2C4FCObj);
                        }
                    }

                    l2C4FS = PropertiesEditor.dfMProps.getProperty("language2Content04FontStyle");
                    if (l2C4FS != null && !"".equals(l2C4FS)){
                        lang2Content4FontStyleCB.setSelectedItem(l2C4FS);
                    }

                    l2C4DS = PropertiesEditor.dfMProps.getProperty("language2Content04DisplaySelectable");
                    switch (l2C4DS) {
                        case "true":
                            lang2Content4DisplaySelectableCheckB.setSelected(true);
                            break;
                        case "false":
                            lang2Content4DisplaySelectableCheckB.setSelected(false);
                            break;
                    }
            }

            //////////////// LANGUAGE-3 ///////////////
            // Local variables declaration
            String l3C1DT;
            String l3C1FC;
            String l3C1FS;
            String l3C1DS;
            String l3C2DT;
            String l3C2FC;
            String l3C2FS;
            String l3C2DS;
            String l3C3DT;
            String l3C3FC;
            String l3C3FS;
            String l3C3DS;
            String l3C4DT;
            String l3C4FC;
            String l3C4FS;
            String l3C4DS;
            // language3Content01
            switch (lang3NumOfContentDecsCB.getSelectedItem().toString()) {
                case "1":
                    l3C1DT = PropertiesEditor.dfMProps.getProperty("language3Content01DisplayText");
                    if (l3C1DT != null && !"".equals(l3C1DT)){
                        lang3Content1DisplayTextTF.setText(l3C1DT);
                    }
                    l3C1FC = PropertiesEditor.dfMProps.getProperty("language3Content01FontColour");
                    if (l3C1FC != null && !"".equals(l3C1FC)){
                        int i = getColorNamesFromRGBCodes(l3C1FC);
                        if (1 <= 13){
                            lang3Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C1FCObj = PropertiesEditor.makeObj(l3C1FC);
                            lang3Content1FontColourCB.addItem(l3C1FCObj);
                            lang3Content1FontColourCB.setSelectedItem(l3C1FCObj);
                        }
                    }
                    l3C1FS = PropertiesEditor.dfMProps.getProperty("language3Content01FontStyle");
                    if (l3C1FS != null && !"".equals(l3C1FS)){
                        lang3Content1FontStyleCB.setSelectedItem(l3C1FS);
                    }
                    l3C1DS = PropertiesEditor.dfMProps.getProperty("language3Content01DisplaySelectable");
                    if (l3C1DS != null && !"".equals(l3C1DS)){
                        switch (l3C1DS) {
                            case "true":
                                lang3Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }

                // language3Content02
                case "2":
                    l3C1DT = PropertiesEditor.dfMProps.getProperty("language3Content01DisplayText");
                    if (l3C1DT != null && !"".equals(l3C1DT)){
                        lang3Content1DisplayTextTF.setText(l3C1DT);
                    }
                    l3C1FC = PropertiesEditor.dfMProps.getProperty("language3Content01FontColour");
                    if (l3C1FC != null && !"".equals(l3C1FC)){
                        int i = getColorNamesFromRGBCodes(l3C1FC);
                        if (1 <= 13){
                            lang3Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C1FCObj = PropertiesEditor.makeObj(l3C1FC);
                            lang3Content1FontColourCB.addItem(l3C1FCObj);
                            lang3Content1FontColourCB.setSelectedItem(l3C1FCObj);
                        }
                    }
                    l3C1FS = PropertiesEditor.dfMProps.getProperty("language3Content01FontStyle");
                    if (l3C1FS != null && !"".equals(l3C1FS)){
                        lang3Content1FontStyleCB.setSelectedItem(l3C1FS);
                    }
                    l3C1DS = PropertiesEditor.dfMProps.getProperty("language3Content01DisplaySelectable");
                    if (l3C1DS != null && !"".equals(l3C1DS)){
                        switch (l3C1DS) {
                            case "true":
                                lang3Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C2DT = PropertiesEditor.dfMProps.getProperty("language3Content02DisplayText");
                    if (l3C2DT != null && !"".equals(l3C2DT)){
                        lang3Content2DisplayTextTF.setText(l3C2DT);
                    }
                    l3C2FC = PropertiesEditor.dfMProps.getProperty("language3Content02FontColour");
                    if (l3C2FC != null && !"".equals(l3C2FC)){
                        int i = getColorNamesFromRGBCodes(l3C2FC);
                        if (1 <= 13){
                            lang3Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C2FCObj = PropertiesEditor.makeObj(l3C2FC);
                            lang3Content2FontColourCB.addItem(l3C2FCObj);
                            lang3Content2FontColourCB.setSelectedItem(l3C2FCObj);
                        }
                    }
                    l3C2FS = PropertiesEditor.dfMProps.getProperty("language3Content02FontStyle");
                    if (l3C2FS != null && !"".equals(l3C2FS)){
                        lang3Content2FontStyleCB.setSelectedItem(l3C2FS);
                    }
                    l3C2DS = PropertiesEditor.dfMProps.getProperty("language3Content02DisplaySelectable");
                    if (l3C2DS != null && !"".equals(l3C2DS)){
                        switch (l3C2DS) {
                            case "true":
                                lang3Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language3Content03
                case "3":
                    l3C1DT = PropertiesEditor.dfMProps.getProperty("language3Content01DisplayText");
                    if (l3C1DT != null && !"".equals(l3C1DT)){
                        lang3Content1DisplayTextTF.setText(l3C1DT);
                    }
                    l3C1FC = PropertiesEditor.dfMProps.getProperty("language3Content01FontColour");
                    if (l3C1FC != null && !"".equals(l3C1FC)){
                        int i = getColorNamesFromRGBCodes(l3C1FC);
                        if (1 <= 13){
                            lang3Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C1FCObj = PropertiesEditor.makeObj(l3C1FC);
                            lang3Content1FontColourCB.addItem(l3C1FCObj);
                            lang3Content1FontColourCB.setSelectedItem(l3C1FCObj);
                        }
                    }
                    l3C1FS = PropertiesEditor.dfMProps.getProperty("language3Content01FontStyle");
                    if (l3C1FS != null && !"".equals(l3C1FS)){
                        lang3Content1FontStyleCB.setSelectedItem(l3C1FS);
                    }
                    l3C1DS = PropertiesEditor.dfMProps.getProperty("language3Content01DisplaySelectable");
                    if (l3C1DS != null && !"".equals(l3C1DS)){
                        switch (l3C1DS) {
                            case "true":
                                lang3Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C2DT = PropertiesEditor.dfMProps.getProperty("language3Content02DisplayText");
                    if (l3C2DT != null && !"".equals(l3C2DT)){
                        lang3Content2DisplayTextTF.setText(l3C2DT);
                    }
                    l3C2FC = PropertiesEditor.dfMProps.getProperty("language3Content02FontColour");
                    if (l3C2FC != null && !"".equals(l3C2FC)){
                        int i = getColorNamesFromRGBCodes(l3C2FC);
                        if (1 <= 13){
                            lang3Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C2FCObj = PropertiesEditor.makeObj(l3C2FC);
                            lang3Content2FontColourCB.addItem(l3C2FCObj);
                            lang3Content2FontColourCB.setSelectedItem(l3C2FCObj);
                        }
                    }
                    l3C2FS = PropertiesEditor.dfMProps.getProperty("language3Content02FontStyle");
                    if (l3C2FS != null && !"".equals(l3C2FS)){
                        lang3Content2FontStyleCB.setSelectedItem(l3C2FS);
                    }
                    l3C2DS = PropertiesEditor.dfMProps.getProperty("language3Content02DisplaySelectable");
                    if (l3C2DS != null && !"".equals(l3C2DS)){
                        switch (l3C2DS) {
                            case "true":
                                lang3Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C3DT = PropertiesEditor.dfMProps.getProperty("language3Content03DisplayText");
                    if (l3C3DT != null && !"".equals(l3C3DT)){
                        lang3Content3DisplayTextTF.setText(l3C3DT);
                    }
                    l3C3FC = PropertiesEditor.dfMProps.getProperty("language3Content03FontColour");
                    if (l3C3FC != null && !"".equals(l3C3FC)){
                        int i = getColorNamesFromRGBCodes(l3C3FC);
                        if (i <= 13){
                            lang3Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l3C3FCObj = PropertiesEditor.makeObj(l3C3FC);
                        lang3Content3FontColourCB.addItem(l3C3FCObj);
                        lang3Content3FontColourCB.setSelectedItem(l3C3FCObj);
                        }
                    }
                    l3C3FS = PropertiesEditor.dfMProps.getProperty("language3Content03FontStyle");
                    if (l3C3FS != null && !"".equals(l3C3FS)){
                        lang3Content3FontStyleCB.setSelectedItem(l3C3FS);
                    }
                    l3C3DS = PropertiesEditor.dfMProps.getProperty("language3Content03DisplaySelectable");
                    if (l3C3DS != null && !"".equals(l3C3DS)){
                        switch (l3C3DS) {
                            case "true":
                                lang3Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    break;

                // language3Content04
                case "4":
                    l3C1DT = PropertiesEditor.dfMProps.getProperty("language3Content01DisplayText");
                    if (l3C1DT != null && !"".equals(l3C1DT)){
                        lang3Content1DisplayTextTF.setText(l3C1DT);
                    }
                    l3C1FC = PropertiesEditor.dfMProps.getProperty("language3Content01FontColour");
                    if (l3C1FC != null && !"".equals(l3C1FC)){
                        int i = getColorNamesFromRGBCodes(l3C1FC);
                        if (1 <= 13){
                            lang3Content1FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C1FCObj = PropertiesEditor.makeObj(l3C1FC);
                            lang3Content1FontColourCB.addItem(l3C1FCObj);
                            lang3Content1FontColourCB.setSelectedItem(l3C1FCObj);
                        }
                    }
                    l3C1FS = PropertiesEditor.dfMProps.getProperty("language3Content01FontStyle");
                    if (l3C1FS != null && !"".equals(l3C1FS)){
                        lang3Content1FontStyleCB.setSelectedItem(l3C1FS);
                    }
                    l3C1DS = PropertiesEditor.dfMProps.getProperty("language3Content01DisplaySelectable");
                    if (l3C1DS != null && !"".equals(l3C1DS)){
                        switch (l3C1DS) {
                            case "true":
                                lang3Content1DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content1DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C2DT = PropertiesEditor.dfMProps.getProperty("language3Content02DisplayText");
                    if (l3C2DT != null && !"".equals(l3C2DT)){
                        lang3Content2DisplayTextTF.setText(l3C2DT);
                    }
                    l3C2FC = PropertiesEditor.dfMProps.getProperty("language3Content02FontColour");
                    if (l3C2FC != null && !"".equals(l3C2FC)){
                        int i = getColorNamesFromRGBCodes(l3C2FC);
                        if (1 <= 13){
                            lang3Content2FontColourCB.setSelectedIndex(1);
                        } else if (i == 1000){
                            Object l3C2FCObj = PropertiesEditor.makeObj(l3C2FC);
                            lang3Content2FontColourCB.addItem(l3C2FCObj);
                            lang3Content2FontColourCB.setSelectedItem(l3C2FCObj);
                        }
                    }
                    l3C2FS = PropertiesEditor.dfMProps.getProperty("language3Content02FontStyle");
                    if (l3C2FS != null && !"".equals(l3C2FS)){
                        lang3Content2FontStyleCB.setSelectedItem(l3C2FS);
                    }
                    l3C2DS = PropertiesEditor.dfMProps.getProperty("language3Content02DisplaySelectable");
                    if (l3C2DS != null && !"".equals(l3C2DS)){
                        switch (l3C2DS) {
                            case "true":
                                lang3Content2DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content2DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C3DT = PropertiesEditor.dfMProps.getProperty("language3Content03DisplayText");
                    if (l3C3DT != null && !"".equals(l3C3DT)){
                        lang3Content3DisplayTextTF.setText(l3C3DT);
                    }
                    l3C3FC = PropertiesEditor.dfMProps.getProperty("language3Content03FontColour");
                    if (l3C3FC != null && !"".equals(l3C3FC)){
                        int i = getColorNamesFromRGBCodes(l3C3FC);
                        if (i <= 13){
                            lang3Content3FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                        Object l3C3FCObj = PropertiesEditor.makeObj(l3C3FC);
                        lang3Content3FontColourCB.addItem(l3C3FCObj);
                        lang3Content3FontColourCB.setSelectedItem(l3C3FCObj);
                        }
                    }
                    l3C3FS = PropertiesEditor.dfMProps.getProperty("language3Content03FontStyle");
                    if (l3C3FS != null && !"".equals(l3C3FS)){
                        lang3Content3FontStyleCB.setSelectedItem(l3C3FS);
                    }
                    l3C3DS = PropertiesEditor.dfMProps.getProperty("language3Content03DisplaySelectable");
                    if (l3C3DS != null && !"".equals(l3C3DS)){
                        switch (l3C3DS) {
                            case "true":
                                lang3Content3DisplaySelectableCheckB.setSelected(true);
                                break;
                            case "false":
                                lang3Content3DisplaySelectableCheckB.setSelected(false);
                                break;
                        }
                    }
                    l3C4DT = PropertiesEditor.dfMProps.getProperty("language3Content04DisplayText");
                    if (l3C4DT != null && !"".equals(l3C4DT)){
                        lang3Content4DisplayTextTF.setText(l3C4DT);
                    }
                    l3C4FC = PropertiesEditor.dfMProps.getProperty("language3Content04FontColour");
                    if (l3C4FC != null && !"".equals(l3C4FC)){
                        int i = getColorNamesFromRGBCodes(l3C4FC);
                        if (i <= 13){
                            lang3Content4FontColourCB.setSelectedIndex(i);
                        } else if (i == 1000){
                            Object l3C4FCObj = PropertiesEditor.makeObj(l3C4FC);
                            lang3Content4FontColourCB.addItem(l3C4FCObj);
                            lang3Content4FontColourCB.setSelectedItem(l3C4FCObj);
                        }
                    }
                    l3C4FS = PropertiesEditor.dfMProps.getProperty("language3Content04FontStyle");
                    if (l3C4FS != null && !"".equals(l3C4FS)){
                        lang3Content4FontStyleCB.setSelectedItem(l3C4FS);
                    }
                    l3C4DS = PropertiesEditor.dfMProps.getProperty("language3Content04DisplaySelectable");
                    switch (l3C4DS) {
                        case "true":
                            lang3Content4DisplaySelectableCheckB.setSelected(true);
                            break;
                        case "false":
                            lang3Content4DisplaySelectableCheckB.setSelected(false);
                            break;
                    }
            }

        } catch (Throwable t){
            System.out.println(t.getLocalizedMessage());
        }

    }
    
    private void saveTheProperties() {
        //boolean propFileSaved = false;
        try {            
            setTheContentNNProperties(); // saving the values
            /*if (PropertiesEditor.openPropsFileForGUIEditFlag){
                try {
                    DfMCreatorMain.propWin.validateValues();
                    DfMCreatorMain.propWin.setValuesInThePropsPreviewWindow();
                    propFileSaved = DfMCreatorMain.propWin.proPrevWin.savePropFile();
                } catch (IllegalArgumentException e){
                    DfMCreatorMain.printAnyMsg(PropertiesEditor.RequiredArgsAbsentErrorMsg,
                            I18n.tr("error.dfmPropCreate"), JOptionPane.ERROR_MESSAGE);
                    System.out.println(e + "\n");
                } catch (UnsupportedOperationException ex){
                    DfMCreatorMain.printAnyMsg(PropertiesPreview.canWriteFileMsg,
                            I18n.tr("dirNotAccessible"), JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex){
                    DfMCreatorMain.printAnyMsg(PropertiesPreview.internalErrorMsg,
                            I18n.tr("error"), JOptionPane.ERROR_MESSAGE);                
                }
            } */
            //if (propFileSaved) {                           
                executeFakeProgessBar(); // calling the fake progress bar
            //}
        } catch (IllegalArgumentException e){
            DfMCreatorMain.printAnyMsg(e.getLocalizedMessage(),
                    I18n.tr("no.content.prop.dec.WinTitle"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    

    ////////////////////////////////////////////////
    //  Creating a fake progress bar which will   //
    //  give to the user the impression that the  //
    //  values are saved in a few seconds...      //
    //  In reality it takes less than a second    //
    //  for the values to be saved. This progress //
    //  bar reasures the user and shows him that  //
    //  the values are really being saved and he  //
    //  can experience this visually. Of course   //
    //  the values are saved but it happens so    //
    //  quickly that without this progress bar,   //
    //  the user might have the impression that   //
    //  nothing is being saved.                   //
    ////////////////////////////////////////////////

    // task variable that will be
    // used to execute the task
    private Task task;

    // task class
    class Task extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
            Random random = new Random();
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            while (progress < 100) {
                //Sleep
                try {
                    Thread.sleep(random.nextInt(50));
                } catch (InterruptedException ignore) {}
                //Make random progress.
                progress += random.nextInt(10);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
            setContentValsBT.setEnabled(true);
            quitButton.setEnabled(true);
            DfMCreatorMain.printAnyMsg(I18n.tr("values.saved.msg.contentPropsEditor"),
                    I18n.tr("DONE.contentPropsEditor"), JOptionPane.PLAIN_MESSAGE);
        }
    }

    // sort of actionPerformed that will actually
    // call the fake progress bar.
    public void executeFakeProgessBar() {
        setContentValsBT.setEnabled(false);
        quitButton.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }
    }
    ////////////////////////////////////////////////

}
